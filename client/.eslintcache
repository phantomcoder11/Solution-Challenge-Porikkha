[{"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\index.js":"1","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\App.js":"2","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\utilsClient\\setToken.js":"3","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\routes\\PrivateRoute.js":"4","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\login_register\\register.js":"5","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\login_register\\login.js":"6","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\exam.js":"7","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\classhall.js":"8","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\studentContexts\\studentState.js":"9","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\particularExamDetails\\exam.js":"10","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\Student_Entry.js":"11","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\studentAuth\\auth.js":"12","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\studentAnswerScript.js\\studentAnswer.js":"13","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\create_Exam.js":"14","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\Exam_Hall.js":"15","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\Editor\\Editor.js":"16","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\examContexts\\AppState.js":"17","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\classContexts\\classState.js":"18","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\authContexts\\authState.js":"19","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\webcamContext\\webCamState.js":"20","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\EHStudent\\EHStudent.js":"21","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\authContexts\\authContext.js":"22","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\searchExams.js":"23","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\LoaderC.js":"24","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\classRoom.js":"25","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\examContexts\\AppContext.js":"26","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\classContexts\\classContext.js":"27","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\Noresults.js":"28","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\Noresults.js":"29","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\model.js":"30","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\Loader.js":"31","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\particularExamDetails\\Noresults.js":"32","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\studentContexts\\StudentContext.js":"33","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\studentContexts\\studentReducer.js":"34","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\classroomSearch.js":"35","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\types.js":"36","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\studentAnswerScript.js\\studentCSS.js":"37","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\webcamContext\\webcamContext.js":"38","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\webcamContext\\webcamReducer.js":"39","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\authContexts\\authReducer.js":"40","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\classContexts\\classReducer.js":"41","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\examContexts\\AppReducer.js":"42","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\examCSS.js":"43","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\navbar\\Navbar.js":"44","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\Timer\\Timer.js":"45","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\Face\\Face.js":"46","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\Timer\\Timer.js":"47","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\navbar\\Menuitems.js":"48","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\navbar\\Button.js":"49","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\Face\\utilities.js":"50","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\fill_mcq_questions.js":"51","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\Final_Submission.js":"52","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\give_quiz.js":"53","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\mcq_form.js":"54","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\MCQContexts\\McqContext.js":"55","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\MCQContexts\\McqState.js":"56","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\MCQContexts\\McqReducer.js":"57","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\classHallTeacher.js":"58"},{"size":209,"mtime":1617556034444,"results":"59","hashOfConfig":"60"},{"size":3475,"mtime":1617707731624,"results":"61","hashOfConfig":"60"},{"size":236,"mtime":1617556034450,"results":"62","hashOfConfig":"60"},{"size":490,"mtime":1617556034448,"results":"63","hashOfConfig":"60"},{"size":4482,"mtime":1617561735883,"results":"64","hashOfConfig":"60"},{"size":2864,"mtime":1617561727035,"results":"65","hashOfConfig":"60"},{"size":6409,"mtime":1617809089975,"results":"66","hashOfConfig":"60"},{"size":2974,"mtime":1617561351643,"results":"67","hashOfConfig":"60"},{"size":2207,"mtime":1618030731961,"results":"68","hashOfConfig":"60"},{"size":8520,"mtime":1618172608435,"results":"69","hashOfConfig":"60"},{"size":5984,"mtime":1618196435153,"results":"70","hashOfConfig":"60"},{"size":3133,"mtime":1617561900306,"results":"71","hashOfConfig":"60"},{"size":10242,"mtime":1617561954647,"results":"72","hashOfConfig":"60"},{"size":8418,"mtime":1617719734501,"results":"73","hashOfConfig":"60"},{"size":13056,"mtime":1618174364751,"results":"74","hashOfConfig":"60"},{"size":2986,"mtime":1617556034146,"results":"75","hashOfConfig":"60"},{"size":1747,"mtime":1617556034327,"results":"76","hashOfConfig":"60"},{"size":3816,"mtime":1617556034319,"results":"77","hashOfConfig":"60"},{"size":3057,"mtime":1617645605389,"results":"78","hashOfConfig":"60"},{"size":687,"mtime":1617562090268,"results":"79","hashOfConfig":"60"},{"size":5157,"mtime":1617556034228,"results":"80","hashOfConfig":"60"},{"size":107,"mtime":1617556034298,"results":"81","hashOfConfig":"60"},{"size":765,"mtime":1617556034177,"results":"82","hashOfConfig":"60"},{"size":508,"mtime":1617556034172,"results":"83","hashOfConfig":"60"},{"size":1935,"mtime":1617556034165,"results":"84","hashOfConfig":"60"},{"size":108,"mtime":1617556034323,"results":"85","hashOfConfig":"60"},{"size":110,"mtime":1617556034312,"results":"86","hashOfConfig":"60"},{"size":296,"mtime":1617556034174,"results":"87","hashOfConfig":"60"},{"size":268,"mtime":1617556034165,"results":"88","hashOfConfig":"60"},{"size":3911,"mtime":1617561442530,"results":"89","hashOfConfig":"60"},{"size":463,"mtime":1617556034164,"results":"90","hashOfConfig":"60"},{"size":293,"mtime":1617556034209,"results":"91","hashOfConfig":"60"},{"size":116,"mtime":1617556034331,"results":"92","hashOfConfig":"60"},{"size":1179,"mtime":1617556034333,"results":"93","hashOfConfig":"60"},{"size":836,"mtime":1617556034169,"results":"94","hashOfConfig":"60"},{"size":1756,"mtime":1617628432584,"results":"95","hashOfConfig":"60"},{"size":1077,"mtime":1617556034217,"results":"96","hashOfConfig":"60"},{"size":109,"mtime":1617556034340,"results":"97","hashOfConfig":"60"},{"size":291,"mtime":1617556034343,"results":"98","hashOfConfig":"60"},{"size":1247,"mtime":1617645880173,"results":"99","hashOfConfig":"60"},{"size":1691,"mtime":1617556034315,"results":"100","hashOfConfig":"60"},{"size":811,"mtime":1617556034326,"results":"101","hashOfConfig":"60"},{"size":186,"mtime":1617556034185,"results":"102","hashOfConfig":"60"},{"size":704,"mtime":1617556034206,"results":"103","hashOfConfig":"60"},{"size":1983,"mtime":1617556034290,"results":"104","hashOfConfig":"60"},{"size":5574,"mtime":1617556034276,"results":"105","hashOfConfig":"60"},{"size":1976,"mtime":1617562273858,"results":"106","hashOfConfig":"60"},{"size":27,"mtime":1617556034202,"results":"107","hashOfConfig":"60"},{"size":626,"mtime":1617556034201,"results":"108","hashOfConfig":"60"},{"size":27239,"mtime":1617556034278,"results":"109","hashOfConfig":"60"},{"size":10053,"mtime":1618046315797,"results":"110","hashOfConfig":"60"},{"size":7868,"mtime":1618197164383,"results":"111","hashOfConfig":"60"},{"size":16011,"mtime":1618174505203,"results":"112","hashOfConfig":"60"},{"size":5066,"mtime":1617722868198,"results":"113","hashOfConfig":"60"},{"size":116,"mtime":1617299909950,"results":"114","hashOfConfig":"60"},{"size":3385,"mtime":1617652965136,"results":"115","hashOfConfig":"60"},{"size":1073,"mtime":1617299909951,"results":"116","hashOfConfig":"60"},{"size":6963,"mtime":1618174455495,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"w62x65",{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"120"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"120"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"120"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"120"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"120"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"120"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"120"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"120"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"120"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"120"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"120"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"120"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"120"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"120"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"120"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"120"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"120"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"120"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"120"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"120"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"120"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"120"},"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\index.js",[],["257","258"],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\App.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\utilsClient\\setToken.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\routes\\PrivateRoute.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\login_register\\register.js",["259"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthContext from '../../context/authContexts/authContext';\r\nimport '../../css/register.css';\r\n\r\nimport src from './images/logo.png';\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    registerTeacher,\r\n    //confirmMail,\r\n    userAuth,\r\n    errors,\r\n    setError,\r\n    clearError\r\n  } = useContext(AuthContext);\r\n  const [hide, setHide] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async ()=>{\r\n      if(userAuth){\r\n        props.history.push('/');\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [userAuth , props.history])\r\n\r\n  const [teacher, setTeacher] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    password_repeat: '',\r\n    phoneNumber: '',\r\n    institute: ''\r\n  });\r\n\r\n  const {\r\n    name,\r\n    email,\r\n    password,\r\n    password_repeat,\r\n    phoneNumber,\r\n    institute\r\n  } = teacher;\r\n\r\n  const handleChange = (e) => {\r\n    setTeacher({\r\n      ...teacher,\r\n      [e.target.name]: e.target.value\r\n    });\r\n    console.log(e.target);\r\n    clearError();\r\n  };\r\n\r\n  const submit = async (e)=>{\r\n    e.preventDefault();\r\n    if(password !== password_repeat){\r\n      await setError(\"Password don't match\");\r\n      setHide(false);\r\n    }else{\r\n      await registerTeacher({name,email,password,phoneNumber,institute});\r\n      setHide(false);\r\n    }\r\n  }\r\n\r\n  const hideDisplay = (e) => {\r\n    setHide(true);\r\n  };\r\n\r\n  return (\r\n    \r\n    <div className=\"reg\">\r\n    <div className=\"wrapper\">\r\n    <section className=\"left\">\r\n      <img className=\"logo\" src={src} alt=\"\" />\r\n      <div className=\"question\">\r\n\r\n          Already Registered?\r\n      \r\n      </div>\r\n      <div className=\"btn111 noHover\">\r\n        <button className=\"join noHover\" type=\"submit\">\r\n           <Link to=\"/login\" style={{color:\"white\",textDecoration:'none'}}>Sign In</Link>\r\n        </button>\r\n        <p className=\"\" style={{marginTop:'50px'}}><Link to=\"/studentLogin\" style={{color:\"white\",textDecoration:'none',fontSize:'150%',fontWeight:'bold'}}>Are you as student ?</Link>.</p>\r\n      </div>\r\n    </section>\r\n    <section className=\"right\">\r\n      <div>\r\n        <h2 className=\"signIn\">Sign Up</h2>\r\n      </div>\r\n      <form action=\"post\" onSubmit={submit}>\r\n        <div className=\"input-box\">\r\n          <input className=\"name\" \r\n            type=\"text\" \r\n            placeholder=\"Name\" \r\n            required \r\n            name='name'\r\n            onChange={handleChange}\r\n            value={name} />\r\n        </div>\r\n        <div>\r\n          <input className=\"email\"\r\n             type=\"email\" \r\n             placeholder=\"Email\"\r\n             required\r\n             name='email'\r\n             onChange={handleChange}\r\n             value={email}/>\r\n        </div>\r\n        <div>\r\n          <input\r\n            className=\"phnNo\"\r\n            type=\"tel\"\r\n            placeholder=\"Mobile Number\"\r\n            required\r\n            name='phoneNumber'\r\n            onChange={handleChange} \r\n            value={phoneNumber}\r\n          />\r\n        </div>\r\n        <div>\r\n          <input\r\n            className=\"pass\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            required\r\n            name='password'\r\n            onChange={handleChange} \r\n            value={password}\r\n          />\r\n        </div>\r\n        <div className=\"input-box\">\r\n          <input className=\"name\" \r\n            type=\"password\" \r\n            placeholder=\"Repeat Password\" \r\n            name=\"password_repeat\" \r\n            required \r\n            onChange={handleChange} \r\n            value={password_repeat}/>   \r\n        </div>\r\n        <div className=\"input-box\">\r\n           <input className=\"name\" \r\n            type=\"text\" \r\n            placeholder=\"Currently Working institution\"\r\n            name=\"institute\" \r\n            required \r\n            autoComplete=\"off\"\r\n            onChange={handleChange} \r\n            value={institute}/>\r\n        </div>\r\n        <div>\r\n          <button className=\"btnSignIn\" type=\"submit\">\r\n            Sign Up\r\n          </button>\r\n          { hide===false && errors !== null && <div style={{height:'30px',width:'20%',position:'absolute',fontSize:'2rem',color:'red',marginLeft:'15%',marginTop:'70px'}}>\r\n          {errors.msg ? errors.msg : errors.error[0].msg }\r\n          \r\n          </div>} \r\n        </div>\r\n      </form>\r\n    </section>\r\n  </div>\r\n  </div>\r\n      \r\n    );\r\n};\r\n\r\nexport default Register;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\login_register\\login.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\exam.js",["260","261"],"import React,{useState,useEffect,useContext} from \"react\";\r\nimport \"../../css/Page1.css\";\r\nimport { Link , useParams } from \"react-router-dom\";\r\nimport Navbar from '../navbar/Navbar';\r\nimport SearchExam from './searchExams';\r\n\r\nimport AppContext from '../../context/examContexts/AppContext';\r\nimport LoaderC from \"./LoaderC\";\r\nimport Noresults from './Noresults';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Exam=()=>{\r\n\r\n    const { _id } = useParams();\r\n\r\n    const [ exams , setExams ] = useState(null);\r\n\r\n    const [ objExams , setObjExams ] = useState(null);\r\n\r\n    const [ error , setError ] = useState('');\r\n\r\n    const { getCorrespondingExams , search , correspondingExams } = useContext( AppContext );\r\n    \r\n    useEffect( () => {\r\n\r\n           const fetchData3 = async ()=>{\r\n            await getCorrespondingExams(_id);\r\n\r\n            await setExams(correspondingExams);\r\n \r\n            console.log(correspondingExams);\r\n\r\n            const response = await axios.get(`/classroom/mcq/${_id}`);\r\n\r\n            if(response.data.msg!==undefined){\r\n\r\n                setError(response.data.msg);\r\n                \r\n                return;\r\n            }\r\n            \r\n            setObjExams(response.data.obj_exams);\r\n\r\n            console.log(response.data.obj_exams);\r\n            }\r\n            fetchData3();\r\n\r\n    }, [correspondingExams])\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"Page1\">\r\n                    <div className=\"lev1\">\r\n                        <SearchExam className=\"box1\"></SearchExam> \r\n                        <div className=\"box2\">\r\n                            <h2><Link to = {`/exam/create/${_id}`} >Create Exam</Link></h2>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"history\" >\r\n                        <h4 style={{color:'black',fontWeight:'bold'}}>HISTORY</h4>\r\n                    </div>\r\n                    <div className=\"table\">\r\n                    <table  style={{borderRadius:'10px'}}>\r\n                            <tr style={{color:'black',fontWeight:'bold'}}>\r\n                                <th style={{fontWeight:'bold'}}>Exam ID</th>\r\n                                <th style={{fontWeight:'bold'}}>EXAM DATE</th>\r\n                                <th style={{fontWeight:'bold'}}>NAME</th>\r\n                            </tr>\r\n         \r\n                            {\r\n                               search===null && exams===null ? <LoaderC /> :\r\n\r\n                               search!==null ? \r\n                               \r\n                                search.length===0 ? \r\n                                \r\n                                <Noresults /> : \r\n                                 search.map(exam =>(\r\n                                   \r\n                                    <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n                                    \r\n                                       <td><Link to ={`/exam/details/${exam._id}`} style={{textDecoration:'none',color:'black'}}>{exam._id}</Link></td>\r\n                                    \r\n                                       <td style={{color:'black'}}>{exam.date.split(\"T\")[0]}</td>\r\n                                    \r\n                                       <td style={{color:'black'}}>{exam.name}</td>\r\n                                    </tr>\r\n                                )) : \r\n                                 exams===null || exams.length===0 ? <Noresults /> :\r\n                                \r\n                                 exams.map(exam =>(\r\n                                \r\n                                   <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n                                   \r\n                                       <td><Link to ={`/exam/details/${exam._id}?status=1`} style={{textDecoration:'none',color:'black'}}>{exam._id}</Link></td>\r\n                                   \r\n                                       <td style={{color:'black'}}>{exam.date.split(\"T\")[0]}</td>\r\n                                   \r\n                                       <td style={{color:'black'}}>{exam.name}</td>\r\n                                   \r\n                                    </tr>\r\n                                )) \r\n                            }\r\n                           \r\n                        </table>\r\n                    </div>\r\n                    <br /><br />\r\n\r\n                    <div className=\"history\" >\r\n                        <h4 style={{color:'black',fontWeight:'bold'}}>MCQS</h4>\r\n                    </div>\r\n\r\n                    <br /><br />\r\n\r\n                    <div className=\"table\">\r\n                      <table  style={{borderRadius:'10px'}}>\r\n                            \r\n                            <tr style={{color:'black',fontWeight:'bold'}}>\r\n                            \r\n                                <th style={{fontWeight:'bold'}}>Exam ID</th>\r\n                            \r\n                                <th style={{fontWeight:'bold'}}>EXAM DATE</th>\r\n                            \r\n                                <th style={{fontWeight:'bold'}}>NAME</th>\r\n                            </tr>\r\n         \r\n                            {\r\n                               objExams===null ? <LoaderC /> :\r\n                                \r\n                                 objExams===null || objExams.length===0 ? <Noresults /> :\r\n                              \r\n                                 objExams.map(exam =>(\r\n                              \r\n                                    <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n                                    \r\n                                       <td><Link to ={`/exam/details/${exam._id}?status=2`} style={{textDecoration:'none',color:'black'}}>{exam._id}</Link></td>\r\n                                    \r\n                                       <td style={{color:'black'}}>{exam.date.split(\"T\")[0]}</td>\r\n                                    \r\n                                       <td style={{color:'black'}}>{exam.name}</td>\r\n                                    </tr>\r\n                                )) \r\n                            }\r\n                           \r\n                        </table>\r\n                    </div>\r\n                    \r\n               </div>\r\n        </>)\r\n}\r\n\r\nexport default Exam;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\classhall.js",["262","263","264","265","266"],"import React,{useState, useContext,useEffect} from 'react'\r\n// import '../../App.css';\r\nimport '../../css/classhall.css';\r\nimport plus from \"../../img/plus.png\";\r\nimport Model from './model';\r\nimport ClassRoom from './classRoom';\r\nimport ClassContext from '../../context/classContexts/classContext';\r\nimport ClassroomSearch from './classroomSearch';\r\n\r\nimport authContext from '../../context/authContexts/authContext';\r\nimport Loader from './Loader';\r\n\r\nimport NoResults from './Noresults';\r\n\r\nconst Classhall = () => {\r\n\r\n    const {classRooms,search,isOpen,changeIsOpen ,clearEditDetails , getClassroom } = useContext(ClassContext);\r\n\r\n    const { log_out , clearError, teacher , getTeacher } = useContext(authContext);\r\n\r\n    const [ teacherState , setTeacherState ] = useState(null);\r\n\r\n    const [classes , setClasses]=useState(null);\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async ()=>{\r\n            if(teacherState===null){\r\n              await getTeacher();\r\n              await setTeacherState(teacher);\r\n            }\r\n         }\r\n         fetchData();\r\n    },[teacher]);\r\n\r\n    useEffect(()=>{\r\n        const fetchDataC = async ()=>{\r\n            await  getClassroom();\r\n            await  setClasses(classRooms);\r\n        }\r\n        fetchDataC();\r\n    },[classRooms])\r\n\r\n    const handleChange=()=>{\r\n        changeIsOpen();\r\n        clearEditDetails();\r\n    }\r\n\r\n    const logout=()=>{\r\n        log_out();\r\n        clearError();\r\n    }\r\n\r\n    const buttonStyles={position:'absolute',margin:\"1% 80%\",zIndex:'10000',borderRadius:'5px',cursor:'pointer'}\r\n    return (\r\n        <div className=\"classHall\">\r\n             <div className=\"topnav\" id=\"myTopnav\">\r\n                <a  className=\"active\">Porikkha</a>\r\n                <ClassroomSearch/>\r\n                <div className=\"class_home_nav_button\">\r\n\r\n                    <div className=\"plus\">\r\n                        <span>Create New Classroom</span>\r\n                        <button onClick={handleChange}>\r\n                        <img id=\"p_button\" src={plus} /></button>\r\n                    </div>\r\n                    <button className=\"CHlogout\"   onClick={logout}>Log Out</button>\r\n                </div>\r\n            \r\n             </div>\r\n             \r\n             <Model open={isOpen} isClose={handleChange}>\r\n                   {teacherState!==null ? teacherState.name : null}               \r\n                </Model>\r\n             <div className=\"exams\">\r\n                 { search===null && classes===null ?  <Loader /> : \r\n                    search !== null ? search.length===0 ? \r\n                    <NoResults /> : \r\n                    search.map((classRoom)=><ClassRoom key={classRoom._id} classRoom={classRoom}/>) : \r\n                    classes.length===0 ? <NoResults />  :\r\n                    classes.map((classRoom)=><ClassRoom key={classRoom._id} classRoom={classRoom}/>) \r\n                 }\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Classhall","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\studentContexts\\studentState.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\particularExamDetails\\exam.js",["267","268","269","270","271","272","273","274"],"import React , { useEffect , useState , useContext , useRef , lazy , fallback, Suspense } from \"react\";\r\nimport \"../../css/exam.css\";\r\n\r\nimport { useParams , Link } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport axios from 'axios';\r\n\r\nimport StudentContext from '../../context/studentContexts/StudentContext';\r\nimport Noresults from \"./Noresults\";\r\nimport Navbar  from '../navbar/Navbar';\r\n\r\nimport download from 'js-file-download';\r\n\r\nconst Exam=({location})=>{\r\n\r\n    const { _id } = useParams();\r\n\r\n    const [ students , setStudents ] = useState(null);\r\n\r\n    const [ exam , setExam ] = useState(null);\r\n\r\n    const [ studentsLength , setStudentLength ] = useState(0);\r\n\r\n    const [ _status , setStatus ] = useState(-1);\r\n\r\n    const [ url , setUrl ] = useState('');\r\n\r\n    const { getStudents , searchStudentName , searchStudentId , clearStudent , studentsofExam , search , getCheckStatus , checkedStatus } = useContext(StudentContext);\r\n\r\n    const searchName = useRef('');\r\n    const searchId = useRef('');\r\n\r\n    const handleChangeName = (e)=>{\r\n\r\n        if(searchName.current.value!==''){\r\n            searchStudentName(e.target.value);\r\n       }else{\r\n           clearStudent();\r\n       }\r\n\r\n    }\r\n\r\n    console.log(url);\r\n\r\n    const handleChangeScholarId = (e)=>{\r\n\r\n        if(searchId.current.value!==''){\r\n            searchStudentId(e.target.value);\r\n       }else{\r\n           clearStudent();\r\n       }\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n\r\n       const { status } = queryString.parse(location.search);\r\n\r\n       setStatus(status);\r\n      \r\n       const fetchData = async ()=>{\r\n\r\n        let response;\r\n\r\n        if(parseInt(status)===1){\r\n            response = await axios.get(`/exam/getExamDetails/${_id}`);\r\n       \r\n        }else if(parseInt(status)===2){\r\n        \r\n            response = await axios.get(`/objective_exam/getExamDetails/${_id}`);\r\n        }\r\n\r\n        console.log(response);\r\n\r\n        await setExam(response.data.exam);\r\n\r\n        await setStudents(response.data.students);\r\n\r\n        setStudentLength(response.data.students.length);\r\n\r\n        await getCheckStatus();\r\n\r\n        await getStudents(_id,status);\r\n       }\r\n       fetchData();\r\n    }, [location.search])\r\n\r\n    const anchorLink = {\r\n      color:'#000',\r\n      textDecoration:'none'\r\n    }\r\n\r\n    const topLebal = {\r\n      width:'590px',\r\n      position:'absolute',\r\n      display:'flex',\r\n      justifyContent:'space-around',\r\n      alignItems:'center',\r\n      marginTop:'-50px'\r\n    }\r\n\r\n    const INPUT_STYLES = {\r\n      background:'#A7E2F3',\r\n      border:'1px solid black'\r\n    }\r\n\r\n    const storeLocal=(id)=>{\r\n      localStorage.setItem(\"student_id\",JSON.stringify(id));\r\n    }\r\n\r\n    const Export_List = async (e)=>{\r\n\r\n      if(parseInt(_status)===1){\r\n\r\n        const downloadFile = () => {\r\n        \r\n           axios.get(`/exam/getStudentsExcel/${_id}`)\r\n        \r\n            .then(resp => {\r\n          \r\n                  download(resp.data,'students.xlsx');\r\n           });\r\n       }\r\n\r\n       downloadFile();\r\n      \r\n      }else if(parseInt(_status)===2){\r\n\r\n        const downloadFile = () => {\r\n        \r\n           axios.get(`/objective_exam/getStudentsExcel/${_id}`)\r\n         \r\n             .then(resp => {\r\n           \r\n                   download(resp.data,'students.xlsx');\r\n            });\r\n        }\r\n\r\n        downloadFile();\r\n\r\n      }\r\n    }\r\n\r\n    return (\r\n     <div id='ExamId'>\r\n      <Navbar />\r\n      <div className=\"PExam\">\r\n      <h1>{exam!==null ? exam.name : 'Exam Name' }</h1>\r\n      <div className=\"flex-container\">\r\n       \r\n        <div className=\"flex-item-left\">\r\n       \r\n          <input type=\"text\" ref={searchName} placeholder=\"Search by name\" className=\"search1\" onChange={handleChangeName} style={INPUT_STYLES}/>\r\n       \r\n          <input type=\"Number\" ref={searchId} placeholder=\"Search by ID\" className=\"search2\" onChange={handleChangeScholarId} style={INPUT_STYLES}/>\r\n       \r\n          <div className=\"list\">\r\n       \r\n           <p style={{marginTop:'50px',fontWeight:'bold',fontSize:'100%'}}>Student list</p>\r\n\r\n           <div className=\"table\">\r\n                    <table>\r\n                       <tr style={{color:'black',fontWeight:'bold'}}>\r\n                           <th style={{fontWeight:'bold'}}>Name</th>\r\n                           <th style={{fontWeight:'bold'}}>ID</th>\r\n                           <th style={{fontWeight:'bold'}}>Email</th>\r\n                           <th style={{fontWeight:'bold'}}>Status</th>\r\n                           <th style={{fontWeight:'bold'}}>Marks</th>\r\n                        </tr>\r\n\r\n              { search !== null ? search.length===0 ? \r\n\r\n                <Noresults /> : \r\n                search.map(\r\n                  student=>(\r\n                        <tr style={{background:'#F2F0F0'}}>\r\n                         \r\n                          <td>\r\n                            { parseInt(_status)===1 ? \r\n                               \r\n                               <Link onClick={()=>{storeLocal(_id)}} to={`/getStudentDetails`} style={anchorLink}>\r\n                              \r\n                                  {student.name}\r\n                               </Link> :\r\n    \r\n                               <Link to={`/Final_Submission?_id=${_id}&studentId=${student._id}`} style={anchorLink}>\r\n                              \r\n                                {student.name}\r\n                             </Link>\r\n                            } \r\n                          </td> \r\n                         \r\n                          <td>{student.scholarId}</td>\r\n                          <td>{student.email}</td>\r\n                          <td>{student.status===false?'false':'true'}</td>\r\n                          <td>{student.marks}</td>\r\n                         </tr> \r\n                  )\r\n                ) : \r\n                 studentsofExam.length===0 ? \r\n                \r\n                 <Noresults /> :\r\n                 \r\n                 studentsofExam.map(\r\n                 \r\n                  student=>(\r\n                 \r\n                      <tr style={{background:'#F2F0F0'}}>\r\n                    \r\n                        <td>\r\n\r\n\r\n                        { parseInt(_status)===1 ? \r\n                               \r\n                               <Link onClick={()=>{storeLocal(student._id)}} to={`/getStudentDetails`} style={anchorLink}>\r\n                              \r\n                                  {student.name}\r\n                               </Link> :\r\n                               <Link to={`/Final_Submission?_id=${_id}&studentId=${student._id}`} style={anchorLink}>\r\n                              \r\n                                {student.name}\r\n                             </Link>\r\n                            } \r\n                        </td>\r\n                    \r\n                        <td>{student.scholarId}</td>\r\n                        <td>{student.email}</td>\r\n                        <td>{student.status===false?'false':'true'}</td>\r\n                        <td>{student.marks}</td>\r\n                      </tr> \r\n                  )\r\n                ) \r\n              }\r\n    </table>\r\n                  \r\n  </div>\r\n\r\n\r\n</div>\r\n</div>\r\n<div class=\"flex-item-right\">\r\n<div className=\"details\">\r\n    <h4 style={{marginBottom:'25px',fontWeight:'bold',fontSize:'105%'}}>Exam Details</h4>\r\n    <table>\r\n        <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n            <th>Exam Date</th>\r\n            <th>{exam!==null ? exam.date.split(\"T\")[0] : NaN}</th>\r\n        </tr>\r\n        <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n            <td>Student Appreared</td>\r\n            <td>{studentsLength}</td>\r\n        </tr>\r\n      \r\n    </table>\r\n</div>\r\n{ parseInt(_status)===1 ? \r\n<div className=\"status\">\r\n    <h3 style={{marginBottom:'25px',marginLeft:'0px',fontWeight:'bold',fontSize:'105%'}}>Check Status</h3>\r\n    <table>\r\n        <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n            <td>Papers checked</td>\r\n            <td>{checkedStatus}</td>\r\n        </tr>\r\n        <tr style={{background:'#F2F0F0',marginBottom:'20px'}}>\r\n            <td>Papers remaining</td>\r\n            <td>{studentsLength - checkedStatus}</td>\r\n        </tr>\r\n    </table>\r\n  </div>\r\n  : null}\r\n\r\n   <div>\r\n\r\n      <button className='SEfinal' onClick={Export_List}>\r\n          Export Student List\r\n      </button>\r\n   </div>\r\n  \r\n  </div>\r\n </div>\r\n</div>\r\n</div>)\r\n}\r\nexport default Exam;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\Student_Entry.js",["275"],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\studentAuth\\auth.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\studentAnswerScript.js\\studentAnswer.js",["276","277","278","279","280","281","282","283","284","285"],"import React,{ useEffect, useState ,useRef} from 'react';\r\nimport axios from 'axios';\r\nimport WebViewer from \"@pdftron/webviewer\"\r\nimport \"../../css/test.css\";\r\nimport { markButton , buttonS , buttonM  , markContainerDesciption , markListStyle , questionAnswer } from './studentCSS';\r\nimport Navbar  from \"../navbar/Navbar\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Loader from \"../classroom_teacher_signup/Loader\";\r\n\r\nconst StudentAnswerScript=()=>{\r\n  const viewer =useRef();\r\n  const history=useHistory();\r\n  const [ count , setCount ] = useState(0);\r\n\r\n  const [ marksList , setMarksList ] = useState(null);\r\n\r\n  const [ pdfSrc , setPdfSrc ] = useState(null);\r\n\r\n  const [ questionPaper , setQuestionPaper ] = useState(null);\r\n\r\n  const [ examName , setExamName ] = useState('');\r\n\r\n  const [ questionPaperType , setQuestionPaperType ] = useState(null);\r\n\r\n  const [ student , setStudent ] = useState(null);\r\n\r\n  const [ totalMarks , setTotalMarks ] = useState(0);\r\n\r\n  const [ response , setResponse ] = useState(null);\r\n\r\n//   const { _id } = useParams();\r\nlet _id=  JSON.parse(localStorage.getItem(\"student_id\"));\r\n\r\n  const arrayBufferToBase64 = (buffer)=>{\r\n     \r\n    var binary = '';\r\n \r\n    var bytes = [].slice.call(new Uint8Array(buffer));\r\n \r\n    bytes.forEach((b) => binary += String.fromCharCode(b));\r\n \r\n    return window.btoa(binary);\r\n  };\r\n  \r\n  useEffect(async ()=>{\r\n      \r\n  const fetchData =  async ()=>{\r\n    if(_id!=undefined){\r\n    \r\n      const response = await axios.get(`/student/getStudentDetails/${_id}`);   \r\n   \r\n      await setStudent(response.data);\r\n   \r\n      const questionPaper = await axios.get(`/exam/getQuestionPaper/${response.data.student.owner}`);\r\n   \r\n      const base64FlagQ = `data:${questionPaper.data.exam.questionPaperType};base64,`;\r\n              \r\n      const imageStrQ = arrayBufferToBase64(questionPaper.data.exam.questionPaper.data);\r\n      \r\n      setQuestionPaper( base64FlagQ + imageStrQ );\r\n   \r\n      setQuestionPaperType(questionPaper.data.exam.questionPaperType);\r\n   \r\n      setExamName(questionPaper.data.exam.name);\r\n   \r\n      await setMarksList(response.data.student.marksDistribution);\r\n      \r\n      await setTotalMarks(response.data.student.marks);\r\n   \r\n      const base64Flag = `data:${response.data.student.answerPaperType};base64,`;\r\n              \r\n      const imageStr = arrayBufferToBase64(response.data.student.answerPaper.data);\r\n      \r\n      setPdfSrc( base64Flag + imageStr );\r\n   \r\n   \r\n   \r\n   \r\n     //  pdf tron\r\n     WebViewer(\r\n       {\r\n         path: 'lib',\r\n         initialDoc:pdfSrc,\r\n       },\r\n       viewer.current,\r\n     ).then((instance) => {\r\n   \r\n       const arr = new Uint8Array(response.data.student.answerPaper.data);\r\n       const blob = new Blob([arr], { type: 'application/pdf' });\r\n       instance.loadDocument(blob, { filename: 'myfile.pdf' });\r\n   \r\n   \r\n       // const arr = new Uint8Array(pdfSrc);\r\n       // const blob = new Blob([imageStr], { type: 'application/pdf' });\r\n       // instance.loadDocument(blob, { filename: 'myfile.pdf' });\r\n   \r\n       const { docViewer, Annotations } = instance;\r\n       const annotManager = docViewer.getAnnotationManager();\r\n       docViewer.on('documentLoaded', () => {\r\n         const rectangleAnnot = new Annotations.RectangleAnnotation();\r\n         rectangleAnnot.PageNumber = 1;\r\n         // values are in page coordinates with (0, 0) in the top left\r\n         rectangleAnnot.X = 100;\r\n         rectangleAnnot.Y = 150;\r\n         rectangleAnnot.Width = 500;\r\n         rectangleAnnot.Height = 600;\r\n         rectangleAnnot.Author = annotManager.getCurrentUser();\r\n   \r\n         annotManager.addAnnotation(rectangleAnnot);\r\n         // need to draw the annotation otherwise it won't show up until the page is refreshed\r\n         annotManager.redrawAnnotation(rectangleAnnot);\r\n       });\r\n     });\r\n   }\r\n   }\r\n   fetchData();\r\n  },[])\r\n\r\n  const handleChange = (e)=>{\r\n    setCount(e.target.value);\r\n  }\r\n\r\n  const onSubmit = async (e)=>{\r\n    \r\n    e.preventDefault();\r\n    \r\n    let marks=[];\r\n\r\n    for(let i=0;i<count;i++){\r\n      marks.push({ 'index' : i+1 , 'mark' : 0 });\r\n    }\r\n\r\n    await setMarksList(marks);\r\n\r\n    console.log(marksList);\r\n  }\r\n\r\n  const changeMarks = async (e)=>{\r\n\r\n     if(parseInt(e.target.value)<0)\r\n       return;\r\n\r\n     const list = marksList.map(m => {\r\n      if(parseInt(m.index)===parseInt(e.target.name)){\r\n        \r\n        return{\r\n            index:m.index,\r\n            mark:e.target.value\r\n          }\r\n       }else{\r\n        return{\r\n          index:m.index,\r\n          mark:m.mark\r\n        }       \r\n       }\r\n     })\r\n    await setMarksList(list);\r\n\r\n    const total = list.reduce((acc, curr) => (\r\n      acc + parseInt(curr.mark)\r\n   ), 0)\r\n    await setTotalMarks(total);\r\n\r\n  }\r\n\r\n  const submitMarks = async (e)=>{\r\n      e.preventDefault();\r\n      \r\n      console.log('marksList',marksList);\r\n      \r\n      console.log('total marks',totalMarks);\r\n      \r\n      const config ={\r\n        header:{\r\n          'Content-type':'application/json'\r\n        }\r\n      }\r\n\r\n      const stu = {\r\n        marksDistribution : marksList,\r\n        marks : totalMarks,\r\n        status:true\r\n      }\r\n\r\n      console.log(stu)\r\n\r\n      const res = await axios.patch(`/student/updateStudent/${_id}`,stu,config);\r\n\r\n      res.data.error===null?\r\n         setResponse('The answer Script is being checked. Click here to go back'):\r\n         setResponse(`An error Occured ${res.data.error}`);\r\n      \r\n  }\r\n\r\n  const buttonStyle =  {\r\n    textAlign: 'center',\r\n    padding:'1.5% 1% 1.5% 1%',\r\n    width: '25%',\r\n    backgroundColor: '#0093D4',\r\n    color:'rgb(255, 255, 255)',\r\n    border:'whitesmoke',\r\n    border:'10px',\r\n    borderRadius:'1vw',\r\n    outline: 'none',\r\n    border: '2px solid #b9babb',\r\n    fontSize: 'large'\r\n}\r\n\r\n  const FormStyles = {\r\n     marginLeft:'0vw',\r\n     display:\"flex\",\r\n     flexDirection:'column',\r\n     justifyContent:\"space-around\",\r\n     padding:'100px',\r\n     textAlign:'center'\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <Navbar />\r\n        { marksList===null || marksList.length===0 ?\r\n        \r\n              <div style={FormStyles}>\r\n                   <label style={{color:'black',paddingBottom:'40px',fontSize:'200%'}} >Enter the number of questions</label>\r\n                   <form onSubmit={onSubmit}>\r\n         \r\n                        <input type='number' style={{border:'1px solid black'}} name='number' value={count} placeholder=\"Enter the main question Number\" onChange={handleChange}/>\r\n         \r\n                        <button type='submit'>Create</button>\r\n                   </form>\r\n              <br />\r\n              </div>\r\n            :\r\n            <>\r\n            <div className=\"top_section_exam\">\r\n              \r\n            <div className=\"details_com\">\r\n                      <div className=\"student_details\">\r\n                          <h3 className=\"title_is\">Student Details</h3>\r\n                          \r\n                          <div className=\"name_editor\">\r\n                            <span>Name:</span>\r\n                            <span className=\"name_is\">{student===null ? '' :  student.student.name}</span>\r\n                          </div>\r\n                          <div className=\"roll_is\">\r\n                            <span>Roll No:</span>\r\n                            <span>{student===null ? '' : student.student.scholarId}</span>\r\n\r\n                          </div>\r\n                          <div className=\"sub_is\">\r\n                            <span>Subject:</span>\r\n                            <span>{examName}</span>\r\n                          </div>\r\n                        </div>\r\n                  </div>\r\n                  <div className=\"status_is_jt\">\r\n                  {response!==null?\r\n                  <>\r\n                    <h3>Status: Checked</h3>\r\n                    <button id=\"check_goto\" onClick={()=>{history.goBack()}}>{response}</button>\r\n                  </>:<h3>Status: Unchecked</h3>}\r\n                  </div>\r\n                \r\n                \r\n            </div> \r\n            <div  className=\"status_detail_jt\">\r\n            <div  className=\"section_marking\">\r\n                <div  className=\"header_exam_section\">\r\n                 <span>Question Numbers</span>\r\n                 \r\n                 <span >Marks Given</span>\r\n                </div> \r\n                \r\n                  {marksList.map(c => \r\n                   \r\n                    <div style={markButton} className=\"btn_marks\">\r\n                   \r\n                        <button style={buttonS} key={c.index}>{c.index}</button>\r\n                   \r\n                        <input type='Number' name={`${c.index}`} style={buttonM} key={c.index*100} value={c.mark} onChange={changeMarks} />\r\n                     </div>\r\n                  )}\r\n                  { marksList!==null ?\r\n                      \r\n                      <div className=\"tot_marks\">\r\n                      \r\n                        <span>Total Marks</span><br/>\r\n                      \r\n                        <button style={{padding:'2px 3px'}}>{totalMarks}</button>\r\n                    \r\n                      </div>\r\n                  : null}\r\n                </div>  \r\n                  \r\n            </div>\r\n            </>\r\n      }\r\n        \r\n      \r\n      <div className=\"paper_container_exam\">\r\n                \r\n       { questionPaper !==null ?\r\n          <embed type={questionPaperType} src={questionPaper} style={{width:'600px' , height:'1000px'}}></embed>\r\n           : <iframe id=\"tExamqpaper\" src=\"embed.pdf\" width=\"600\" height=\"1000\"><Loader/></iframe>}  \r\n\r\n      \r\n       { student !==null ?\r\n         \r\n         \r\n           <div className=\"\">\r\n            <div className=\"webviewer\" ref={viewer}></div>\r\n          </div>\r\n          \r\n         \r\n       : <iframe id=\"tExamqpaper\" src=\"embed.pdf\" width=\"700\" height=\"1000\"></iframe>} \r\n      </div>\r\n          \r\n        <form onSubmit={submitMarks} className=\"submit_sheet_check\">\r\n           \r\n           <button type='submit' style={buttonStyle}>Submit Marks</button>            \r\n        </form>\r\n        \r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StudentAnswerScript;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\create_Exam.js",["286","287","288","289"],"import React,{ useState , useContext , useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../../css/create_exam.css';\r\nimport AppContext from '../../context/examContexts/AppContext';\r\nimport { useParams } from 'react-router-dom';\r\nimport authContext from '../../context/authContexts/authContext';\r\nimport NavBar from \"../navbar/Navbar\";\r\n\r\nconst Create_Exam = ()=> {\r\n\r\n    const { _id } = useParams();\r\n\r\n    const { storeExamDetails } = useContext(AppContext);\r\n\r\n    const [ response , setResponse ] = useState(''); \r\n\r\n    const [ examCreated , setExamCreated ] = useState(false);\r\n\r\n    const [ examRequested , setExamRequested ] = useState(false);\r\n\r\n    const [ examId , setExamId ] = useState('');\r\n\r\n    const [ exam , setExam ] = useState({\r\n        name:'',hour:'0',minute:'0'\r\n    })\r\n\r\n    const [ fileD , setFileD ] = useState(null); \r\n\r\n    const { name , hour , minute } = exam;\r\n\r\n    const { teacher , getTeacher } = useContext(authContext);\r\n\r\n    const [ teacherState , setTeacherState ] = useState(null);\r\n\r\n    const [ examMode , setExamMode ] = useState('');\r\n\r\n    useEffect(()=>{\r\n        const fetchData4 = async ()=>{\r\n            if(teacherState===null){\r\n              await getTeacher();\r\n              await setTeacherState(teacher);\r\n            }\r\n        }\r\n        fetchData4()\r\n    },[teacher]);\r\n\r\n    const handleChange = (e)=>{\r\n        setExam({\r\n            ...exam,\r\n            [e.target.name]:[e.target.value]\r\n        })\r\n    }\r\n\r\n    const setFile = (e)=>{\r\n        setFileD(e.target.files[0]);\r\n    }\r\n\r\n    const onSubmit = async (e)=>{\r\n\r\n        e.preventDefault();\r\n\r\n        if( parseInt(examMode)!==1000 ){\r\n           \r\n            setResponse(`Click on the Subjective Mode of examination to upload file`);\r\n           \r\n            return;   \r\n        }\r\n\r\n        setExamRequested(true);\r\n\r\n        console.log(exam,fileD);\r\n\r\n        if(fileD && !(fileD.type==='image/png' || fileD.type==='image/jpg' || fileD.type==='image/jpeg' || fileD.type==='application/pdf')){\r\n            setResponse(`Please Upload a image or pdf less than 1MB `);\r\n            setExamRequested(false);\r\n            return;\r\n        }\r\n\r\n       if(fileD && fileD.size>1000000){\r\n           setResponse(`Please Upload a image or pdf less than 1MB ${fileD.size} kb is not allowed`);\r\n           setExamRequested(false);\r\n           return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append('name',name);\r\n        formData.append('hour',hour);\r\n        formData.append('minute',minute);\r\n        formData.append('upload_question_paper',fileD);\r\n        formData.append('_id',_id);\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        };\r\n\r\n        axios.post(`/exam/uploadQuestionPaper`,formData,config)\r\n            \r\n        .then((response) => {\r\n\r\n                console.log(response.data);\r\n               \r\n                if(response.data.error!==undefined){\r\n                    \r\n                    setResponse(response.data.error);\r\n                    \r\n                    return;\r\n                }\r\n              \r\n                setResponse(\"The question paper is successfully uploaded and the exam room has been created\");\r\n\r\n                setExamCreated(true);\r\n\r\n                setExamId(response.data.exam._id);\r\n\r\n                storeExamDetails(response.data.exam._id);\r\n            \r\n        }).catch((error) => {\r\n                setExamRequested(false);\r\n                console.log(error);\r\n        });\r\n    }\r\n\r\n    const heading={\r\n        marginLeft:'-400vw'\r\n    }\r\n\r\n    const handleClick = (e)=>{\r\n\r\n        const data = {\r\n            name:name[0] , \r\n            hour:hour[0] , \r\n            minute:minute[0],\r\n            _id\r\n        }\r\n\r\n        const config ={\r\n           header:{\r\n             'Content-type':'application/json'\r\n          }\r\n        }\r\n\r\n        axios.post(`/objective_exam`,data,config)\r\n            \r\n        .then((response) => {\r\n\r\n               console.log(response.data);\r\n               \r\n                if(response.data.error!==undefined){\r\n                    \r\n                    setResponse(response.data.error);\r\n                    \r\n                    return;\r\n                }\r\n              \r\n                setResponse(\"The exam room has been created\");\r\n\r\n                setExamCreated(true);\r\n\r\n                setExamId(response.data._id);\r\n            \r\n        }).catch((error) => {\r\n                \r\n            setExamRequested(false);\r\n            \r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const handleChangeExamMode = (e) => {\r\n        setExamMode(e.target.value);\r\n    }\r\n\r\n    return(\r\n          \r\n        <>   \r\n        <NavBar/>\r\n        <div className=\"Enter_examForm\">\r\n        <h2 id=\"createheading\">NEW EXAM</h2>\r\n              <form onSubmit={onSubmit} id=\"hello\" style={{marginTop:'-3vh'}}>\r\n              \r\n                <input type=\"text\" style={{color:'black'}}  className=\"newexambutton_top\"  placeholder='Enter Examination Name' name='name' onChange={handleChange} value={name} required/><br />\r\n              \r\n                <h1 className=\"settime\" style={{color:'white'}}></h1>\r\n                \r\n                <input type=\"Number\"  style={{color:'black'}}  className=\"newexambutton_time\" placeholder='hr' name='hour' onChange={handleChange} required/>\r\n        \r\n                <input type=\"Number\" style={{color:'black'}}  className=\"newexambutton_time\" placeholder='min' name='minute' onChange={handleChange}  required/><br />\r\n                \r\n                <button className=\"SEinput\" style={{background:'#1DA6CF',padding:'15px',marginTop:'20px'}}>Select Exam Mode\r\n\r\n                   <div style={{padding:'10px'}}>\r\n                     \r\n                     <label style={{padding:'5px',fontSize:'1.2rem'}} className='inputStyle'> Subjective\r\n                        <input type=\"radio\" name=\"exam_mode\" value=\"1000\" onChange={handleChangeExamMode} style={{marginLeft:'10px'}}/>\r\n                     </label>\r\n                     <span style={{padding:'10px'}}></span>\r\n                     <label style={{padding:'5px',fontSize:'1.2rem'}} className='inputStyle'>Objective\r\n                       <input type=\"radio\" name=\"exam_mode\" value=\"2000\" onChange={handleChangeExamMode}  style={{marginLeft:'10px'}}/>\r\n                     </label>\r\n         \r\n                    </div>\r\n\r\n                </button>\r\n\r\n                <h1 className=\"upload_newexam\" style={{color:'white'}}></h1>  \r\n                \r\n                { parseInt(examMode)===1000 ?\r\n                    \r\n                    <input type='file' style={{color:'black'}}   className=\"newexambutton\"  name=\"upload_question_paper\" onChange={setFile} required />\r\n                \r\n                :   null\r\n                }\r\n\r\n                <div className=\"button_container\">\r\n                    <button type='submit' className=\"newexamsubmit\" style={{pointerEvents: examRequested===true ? 'none' : 'auto' }}>Create Exam</button>\r\n                    <button className=\"newMCQsubmit\" style={{pointerEvents: examRequested===true ? 'none' : 'auto' }} onClick={handleClick}>Create MCQ</button>\r\n                </div>\r\n              \r\n              </form>\r\n              </div>\r\n              {/* <Link to='/mcq_form'>Create MCQ</Link> */}\r\n              <div style={{color:'black',marginLeft:'50vw',transform:'translateX(-18%)'}} className=\"personal_msg\">\r\n\r\n                 { response!==''? response : '' }\r\n\r\n              </div>\r\n              <div className=\"Enter_class\">\r\n\r\n                { parseInt(examMode)===1000 ?\r\n                    \r\n                     examCreated===true && teacherState!==null ? \r\n                        <Link to={`/exam_hall?name=${teacherState.name}(teacher)&room=${name}&_id=${examId}&st=1`}><button>Click to Enter Classroom</button></Link> \r\n                    : null                \r\n                :   \r\n                      examCreated===true && teacherState!==null ? \r\n                         <Link to={`/mcq_form?name=${teacherState.name}(teacher)&room=${name}&_id=${examId}`}><button>Click to Create Mcq</button></Link> \r\n                    : null  \r\n                }\r\n             </div>\r\n         </>\r\n    )\r\n}\r\n\r\nexport default Create_Exam;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\Exam_Hall.js",["290","291","292","293","294","295","296","297","298","299","300","301","302"],"import React , { useState , useEffect , useContext } from 'react'\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\n\r\nimport AppContext from '../../context/examContexts/AppContext';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { formContainer } from './examCSS';\r\n\r\nimport '../../css/porikha.css';\r\nimport Timer from '../Timer/Timer';\r\nimport Face from \"../student_Exam_hall/Face/Face\"\r\nimport \"../student_Exam_hall/EHStudent/EHStudent.css\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nimport webCamContext from '../../context/webcamContext/webcamContext';\r\nimport Loader from \"../classroom_teacher_signup/Noresults\"\r\n\r\nlet socket;\r\n\r\nconst Exam_Hall = ({location}) => {\r\n\r\n    const { exams , storeExamDetails } = useContext(AppContext);\r\n\r\n    const [ startDate , setstartDate ] = useState(0);\r\n\r\n    const END_POINT = 'localhost:5000';\r\n    //const END_POINT = 'https://thawing-inlet-03435.herokuapp.com';\r\n\r\n    const [ name , setName ] = useState('');\r\n    const [ room , setRoom ] = useState('');\r\n    const [ message , setMessage ] = useState('');\r\n    const [ sendMessage , setSendMessage ] = useState('');\r\n    const [ usersInRoom , setusersInRoom ] = useState([]);\r\n    const [ imgSrc , setImgSrc ] = useState('');\r\n    const [ st,setSt ] = useState(-1);\r\n    const [ response , setResponse ] = useState(null);\r\n    const [ fileD , setFileD ] = useState(null); \r\n    const [ _id , setId ] = useState(''); \r\n    const [ email , setEmail ] = useState('');\r\n    const [ scholarId, setScholarId ] = useState(0);\r\n    const [ examS , setExamS ] = useState(null);\r\n    const [ submitStatus , setSubmitStatus ] = useState(false);\r\n \r\n    const arrayBufferToBase64 = (buffer)=>{\r\n\r\n        var binary = '';\r\n     \r\n        var bytes = [].slice.call(new Uint8Array(buffer));\r\n     \r\n        bytes.forEach((b) => binary += String.fromCharCode(b));\r\n     \r\n        return window.btoa(binary);\r\n    };\r\n    \r\n\r\n    useEffect( async ()=> {\r\n\r\n            const { name , room , scholarId , _id , email , st } = queryString.parse(location.search);\r\n\r\n            setSt(st);\r\n            setId(_id);\r\n            setScholarId(scholarId);\r\n            setEmail(email);\r\n\r\n            if(examS===null){\r\n\r\n               const responseS = await axios.get(`/exam/getQuestionPaper/${_id}`);\r\n\r\n               console.log(responseS);\r\n\r\n               await setExamS(responseS);\r\n\r\n               await storeExamDetails(_id);\r\n\r\n               console.log(exams);\r\n\r\n            }\r\n\r\n            if(examS!==null){\r\n\r\n              console.log('Exams',examS.data.exam);\r\n\r\n              const base64Flag = `data:${examS.data.exam.questionPaperType};base64,`;\r\n           \r\n              const imageStr = arrayBufferToBase64(examS.data.exam.questionPaper.data);\r\n\r\n              setImgSrc( base64Flag + imageStr );\r\n\r\n              const x = examS!==null ? ( examS.data.exam.timeLength.split(\":\")[0]*60*60 + examS.data.exam.timeLength.split(\":\")[1]*60 )*1000 : 0;\r\n\r\n              console.log(examS.data.exam.timeLength.split(\":\")[0] ,\" \",examS.data.exam.timeLength.split(\":\")[1], x);\r\n          \r\n              setstartDate(examS.data.exam.startTime + x);\r\n\r\n            }\r\n  \r\n            socket = io();\r\n\r\n            console.log(socket);\r\n\r\n            socket.emit( 'joinRoom' , { username: name , room } );\r\n\r\n            socket.on('message', ({ username , text , time }) =>{\r\n                setMessage(text);\r\n            })\r\n\r\n            setName(name);\r\n            setRoom(room);\r\n\r\n            socket.on('getUsersToRoom',({room , users})=>{\r\n                setusersInRoom(users);\r\n            }) \r\n            \r\n            return()=>{\r\n                socket.on('disconnect');\r\n\r\n                socket.on('getUsersToRoom',({room , users})=>{\r\n                    setusersInRoom(users);\r\n                }) \r\n                \r\n                socket.off();\r\n            }\r\n\r\n    }, [ END_POINT , examS , location.search ])\r\n\r\n    console.log(usersInRoom);\r\n\r\n    const onSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        socket.emit('sendMessage',sendMessage);\r\n\r\n        setSendMessage('');\r\n\r\n        socket.on('message', ({ username , text , time }) =>{\r\n            setMessage(text);\r\n        })\r\n    }\r\n\r\n    const handleChange = (e)=>{\r\n        setSendMessage(e.target.value);\r\n    }\r\n\r\n    const setFile = (e)=>{\r\n        setFileD(e.target.files[0]);\r\n        document.getElementById(\"upload_text\").innerText=`${e.target.files[0].name}`;\r\n        \r\n        document.querySelector(\".custom-file-uploads\").style.backgroundColor=\"#72e911\";\r\n    }\r\n\r\n    const onSubmitAnswer = (e)=>{\r\n        document.querySelector(\".upload_loader\").style.display=\"flex\";\r\n        document.querySelector(\".submit_your_ans form label\").style.display=\"none\";\r\n        document.querySelector(\".submit_your_ans form button\").style.display=\"none\";\r\n\r\n        \r\n        e.preventDefault();\r\n\r\n        console.log(fileD);\r\n\r\n        if(fileD && !(fileD.type==='image/png' || fileD.type==='image/jpg' || fileD.type==='image/jpeg' || fileD.type==='application/pdf')){\r\n            setResponse(`Please Upload a image or pdf less than 1MB `);\r\n            \r\n            return;\r\n        }\r\n\r\n       if(fileD && fileD.size>10000000){\r\n           setResponse(`Please Upload a image or pdf less than 10MB ${fileD.size/1000} MB is not allowed`);\r\n           return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append('name',name);\r\n        formData.append('email',email);\r\n        formData.append('upload_answer_script',fileD);\r\n        formData.append('_id',_id);\r\n        formData.append('scholarId',scholarId);\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        };\r\n\r\n        axios.post(\"/student/uploadAnswerScript\",formData,config)\r\n            \r\n        .then((response) => {\r\n\r\n                console.log(response);\r\n               \r\n                if(response.data.error!==undefined){\r\n                    \r\n                    setResponse(response.data.error);\r\n                    \r\n                    return;\r\n                }\r\n              \r\n              document.querySelector(\".upload_loader\").style.display=\"none\";\r\n              document.querySelector(\".submit_your_ans form button\").style.display=\"block\";\r\n              document.querySelector(\".submit_your_ans form label\").style.display=\"block\";\r\n                setResponse(\"The answer Script is successfully uploaded \");\r\n\r\n                setSubmitStatus(true);\r\n\r\n                socket.emit(\"submitAnswerScript\",{ username:name , room:room });\r\n\r\n                socket.on('getUsersToRoom',({room , users})=>{\r\n                    setusersInRoom(users);\r\n                }) \r\n            \r\n        }).catch((error) => {\r\n                console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const history=useHistory();\r\n    const {check_web_cam} =useContext(webCamContext);\r\n   // console.log(check);\r\n   const [click,setClick]=useState(false);\r\n   const [tabChange,setTabChanges]=useState(0);\r\n   \r\n   const x = 500000;\r\n//    const startDate = new Date().getTime() + x;\r\n   const handleClick=()=>{\r\n       \r\n       setClick(!click);\r\n   }\r\n\r\n   let checkLimit=4;\r\n\r\n   \r\n\r\n   useEffect(()=>{\r\n       \r\n      const fetchData = async ()=>{\r\n       \r\n       window.onbeforeunload = confirmExit;\r\n           function confirmExit()\r\n           {\r\n             return \"show warning\";\r\n           }   \r\n                  \r\n       \r\n           document.addEventListener(\"visibilitychange\",()=>{\r\n\r\n              if(st==0){\r\n               \r\n               if(document.hidden){\r\n                   const count =tabChange+1\r\n                   setTabChanges(count);\r\n                   console.log(tabChange);\r\n                   alert(`you have ${checkLimit} max tab change more then this and you are disqualified`)\r\n                   checkLimit-=1;\r\n               }\r\n               if(checkLimit==0){\r\n                //    history.push(\"/login\");\r\n                   alert(\"max tab change limit reached\")\r\n               }\r\n              }\r\n           })\r\n\r\n           if(!check_web_cam){\r\n               document.querySelector(\".popup_setup\").style.display=\"block\";\r\n           }\r\n           if(check_web_cam){\r\n               document.querySelector(\".popup_setup\").style.display=\"none\";\r\n           }\r\n        }\r\n        fetchData();  \r\n       \r\n   },[tabChange,check_web_cam])\r\n\r\n\r\n   const DetectCam=()=>{\r\n       console.log(\"click\");\r\n       window.location.reload();\r\n       if(check_web_cam){\r\n           document.querySelector(\".popup_setup\").style.display=\"none\";\r\n       }\r\n       \r\n       console.log(check_web_cam);\r\n   }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"popup_setup\">\r\n                \r\n               {st==0 ? \r\n               <div>\r\n                  <div className=\"model_popup\">\r\n                  </div>\r\n                  <div className=\"model_container\">\r\n                     <div className=\"my_custom_model\">\r\n                        <div className=\"top_bar\"></div>\r\n                        <h2>Alert !</h2>\r\n                        <div className=\"model_msg\">\r\n                            Allow the website to access webcam and click ok to remove  or\r\n                            else you wont be able to give the exam.\r\n                            \r\n                        </div>\r\n                        <center><button onClick={()=>{DetectCam()}} >Ok</button></center>\r\n                    </div>\r\n                  </div>\r\n               </div> : null}\r\n\r\n            </div>\r\n      <div className=\"tExam\">\r\n           <table className='tExambg'>\r\n              <tr>\r\n                  <td>\r\n                     <h2 className=\"tExam\">EXAM CODE : {room} </h2>\r\n                     <h5 className=\"tExam\">Note for Students :</h5>\r\n                     <input className=\"tExamnoticeBoard\" type=\"text\" name=\"\" value={message} />\r\n\r\n                     { st==1 ? \r\n            \r\n                       <form id=\"message\" onSubmit={onSubmit}>\r\n           \r\n                       <input type='text' className='message' name='msg' id='msg' placeholder=\"send message\" value = {sendMessage} onChange={handleChange}/>\r\n      \r\n                       <button type='submit' style={{height:'40px'}}>Send</button>\r\n      \r\n                     </form> : null }\r\n\r\n                     <h5>Question Paper :</h5>\r\n                 \r\n                    { examS!==null ?\r\n                        <embed type={examS.data.exam.questionPaperType} src={imgSrc} style={{width:'700px' , height:'1000px'}}></embed>\r\n                        : <iframe id=\"tExamqpaper\"src=\"embed.pdf\" width=\"700\" height=\"1000\"></iframe>} \r\n\r\n                  </td>\r\n                  <td style={{paddingLeft:'180px',position:'relative',top:'-40vh',left:'-3vw'}}>\r\n\r\n                    <h3 className=\"tExam\" style={{marginLeft:'-100px'}}>Time Remaining : <Timer startDate={startDate}/> </h3>\r\n\r\n\r\n                       { st==1 ? \r\n                    \r\n                     <div>\r\n                         <h4 className=\"tExam \" style={{marginLeft:'-100px'}} >Student List</h4>\r\n\r\n                         <table className=\"tExamstudentList\">\r\n\r\n                       <th style={{paddingRight:'100px'}}>Name</th>\r\n                       <th>Status</th>\r\n           \r\n\r\n                          {usersInRoom.map((user)=><tr key={user.id}>\r\n               \r\n                             <td>{user.username}</td>\r\n               \r\n                             <td>{user.status===true?\"True\":\"False\"}</td>\r\n           \r\n                         </tr>)} \r\n\r\n                        </table>\r\n                     </div>\r\n                       \r\n                        :\r\n                        <>\r\n                                <div>\r\n                                    <Face />\r\n                                </div>    \r\n                            <div className=\"submit_your_ans\" >\r\n                                <form style={formContainer} onSubmit={onSubmitAnswer}>\r\n                                \r\n                                <label className=\"custom-file-uploads\">\r\n                                    <input type='file'  name=\"upload_answer_script\" onChange={setFile} required/>\r\n                                    <span id=\"upload_text\">Choose Your Answer Script Here</span>\r\n                                </label>\r\n                                \r\n                                <div className=\"upload_loader\">\r\n                                    <Loader/>\r\n                                </div>\r\n                                    {response!==null ? <span>{response}</span> : <button>Submit Answer Script</button> }\r\n                                </form>\r\n                                \r\n                            </div> \r\n                        </>\r\n                        }\r\n\r\n                  </td>\r\n              </tr>\r\n           </table>\r\n      </div>   \r\n      </>\r\n    )\r\n}\r\n\r\nexport default Exam_Hall;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\Editor\\Editor.js",["303"],"import React, { useRef, useEffect ,} from 'react';\r\nimport WebViewer from '@pdftron/webviewer';\r\nimport {useParams} from \"react-router-dom\"\r\nimport './Editor.css';\r\nimport axios from \"axios\";\r\nimport pdf from \"./pdf/FM.pdf\";\r\nconst Editor = () => {\r\n  const viewer = useRef(null);\r\n let url_id =useParams();\r\n  // if using a class, equivalent of componentDidMount \r\n  useEffect(() => {\r\n\r\n    console.log(url_id._id);\r\n    axios.get(\"/exam/getExamDetails/\"+url_id._id)\r\n    .then((data) => {\r\n\r\n      console.log(data);\r\n\r\n    }).catch(e=>{\r\n      console.log(e);\r\n    })\r\n    WebViewer(\r\n      {\r\n        path: 'lib',\r\n        initialDoc:'http://www.africau.edu/images/default/sample.pdf',\r\n      },\r\n      viewer.current,\r\n    ).then((instance) => {\r\n      const { docViewer, Annotations } = instance;\r\n      const annotManager = docViewer.getAnnotationManager();\r\n      docViewer.on('documentLoaded', () => {\r\n        const rectangleAnnot = new Annotations.RectangleAnnotation();\r\n        rectangleAnnot.PageNumber = 1;\r\n        // values are in page coordinates with (0, 0) in the top left\r\n        rectangleAnnot.X = 100;\r\n        rectangleAnnot.Y = 150;\r\n        rectangleAnnot.Width = 200;\r\n        rectangleAnnot.Height = 50;\r\n        rectangleAnnot.Author = annotManager.getCurrentUser();\r\n\r\n        annotManager.addAnnotation(rectangleAnnot);\r\n        // need to draw the annotation otherwise it won't show up until the page is refreshed\r\n        annotManager.redrawAnnotation(rectangleAnnot);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Editor\">\r\n      <div className=\"test_paper\">\r\n      <div className=\"container_details_only\">\r\n      <div className=\"student_details\">\r\n        <h3 className=\"title_is\">Student Details</h3>\r\n        {/* <div className=\"hr_border\"></div> */}\r\n        <div className=\"name_editor\">\r\n          <span>Name:</span>\r\n          <span className=\"name_is\">Pinky Sharma</span>\r\n        </div>\r\n        <div className=\"roll_is\">\r\n          <span>Roll No:</span>\r\n          <span>1916234</span>\r\n\r\n        </div>\r\n        <div className=\"sub_is\">\r\n          <span>Subject:</span>\r\n          <span>Data Structure</span>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <div className=\"embed_container\">\r\n      <embed src= {pdf}  height=\"654.99px\"/>\r\n      </div>\r\n      </div>\r\n\r\n      <div className=\"editor_section\">\r\n        <div className=\"remarks_container\">\r\n          <div className=\"remarks\">\r\n              <div><span className=\"remarks_title\">Question no:</span> <span className=\"nos1\"><span>1</span><span>2</span><span>3</span></span></div>\r\n              <br/>\r\n              <div><span className=\"remarks_title\">Marks:</span> <span className=\"nos2\"><span>2</span><span>2</span><span>1</span></span> </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"view_content\">\r\n          <div className=\"webviewer\" ref={viewer}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\examContexts\\AppState.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\classContexts\\classState.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\authContexts\\authState.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\webcamContext\\webCamState.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\EHStudent\\EHStudent.js",["304","305","306","307","308"],"import React, { Component,useEffect ,useState,useContext} from 'react';\r\nimport Timer from '../Timer/Timer'\r\nimport Face from '../Face/Face'\r\nimport './EHStudent.css';\r\nimport {useHistory} from \"react-router-dom\"\r\nimport pdf from './pdf/DSproject.pdf'\r\nimport { browser } from '@tensorflow/tfjs-core';\r\nimport webCamContext from '../../../context/webcamContext/webcamContext';\r\n\r\nconst Ehstudent =()=>{\r\n\r\n\r\n    const history=useHistory();\r\n     const {check_web_cam} =useContext(webCamContext);\r\n    // console.log(check);\r\n    const [click,setClick]=useState(false);\r\n    const [tabChange,setTabChanges]=useState(0);\r\n    \r\n    const x = 500000;\r\n    const startDate = new Date().getTime() + x;\r\n    const handleClick=()=>{\r\n        \r\n        setClick(!click);\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        \r\n        \r\n        window.onbeforeunload = confirmExit;\r\n            function confirmExit()\r\n            {\r\n              return \"show warning\";\r\n            }   \r\n                   \r\n        \r\n            // document.addEventListener(\"visibilitychange\",()=>{\r\n                \r\n            //     if(document.hidden){\r\n            //         const count =tabChange+1\r\n            //         setTabChanges(count);\r\n            //         console.log(tabChange);\r\n            //         alert(\"check \",tabChange+1)\r\n            //     }\r\n            //     if(tabChange==4){\r\n            //         history.push(\"/login\");\r\n            //         alert(\"max tab change limit reached\")\r\n            //     }\r\n            // })\r\n\r\n            if(!check_web_cam){\r\n                document.querySelector(\".popup_setup\").style.display=\"block\";\r\n            }\r\n            if(check_web_cam){\r\n                document.querySelector(\".popup_setup\").style.display=\"none\";\r\n            }\r\n            \r\n        \r\n    },[tabChange,check_web_cam])\r\n\r\n\r\n    const DetectCam=()=>{\r\n        console.log(\"click\");\r\n        \r\n        if(check_web_cam){\r\n            document.querySelector(\".popup_setup\").style.display=\"none\";\r\n        }\r\n        \r\n        console.log(check_web_cam);\r\n    }\r\n\r\n    return(<>\r\n            <div className=\"popup_setup\">\r\n                <div className=\"model_popup\">\r\n                </div>\r\n                <div className=\"model_container\">\r\n                    <div className=\"my_custom_model\">\r\n                        <div className=\"top_bar\"></div>\r\n                        <h2>Alert !</h2>\r\n                        <div className=\"model_msg\">\r\n                            Allow the website to access webcam and click ok to remove  or\r\n                            else you wont be able to give the exam.\r\n                            \r\n                        </div>\r\n                        <center><button onClick={()=>{DetectCam()}} >Ok</button></center>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <h1>Name: Pinky Sharma</h1> */}\r\n                <div className=\"Student\">\r\n                    <div className=\"ab\">\r\n                        <div className=\"my_name_is\">\r\n                            <h1>Name: Pinky Sharma</h1>\r\n                        </div>\r\n                        <embed src= {pdf} width=\"85%\" height=\"900vh\"/>\r\n                        \r\n                    </div>\r\n                    <div className=\"cd\">\r\n                    \r\n                        <div id=\"app\"><h2>Time Remaining:<br/></h2><Timer startDate={startDate} /></div>\r\n                        <div className=\"right\">\r\n                        <div><Face /></div>\r\n                            {/* <div className=\"noticeBoard\">Notice Board</div> */}\r\n                        <div className =\"submit_EHS\">\r\n                            <div type=\"file\" className=\"upload\">UPLOAD</div>\r\n                            <div className=\"submit\">SUBMIT</div>\r\n                        </div>\r\n\r\n            </div>\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n\r\n    </>)\r\n}\r\n// class Ehstudent extends Component {\r\n    \r\n//     state = { clicked: false }\r\n\r\n//     handleClick = () => {\r\n//         this.setState({ clicked: !this.state.clicked })\r\n//     }\r\n\r\n\r\n//     render() {\r\n//         const x = 500000;\r\n//             const startDate = new Date().getTime() + x;\r\n//         return(\r\n            \r\n//       <>\r\n\r\n//      <h1>Name: Pinky Sharma</h1>\r\n//       <div className=\"Student\">\r\n//         <div className=\"ab\">\r\n           \r\n//             <embed src= {pdf} width=\"85%\" height=\"900vh\"/>\r\n        \r\n            \r\n//           </div>\r\n//         <div className=\"cd\">\r\n        \r\n//             <div id=\"app\"><h2>Time Remaining:<br/></h2><Timer startDate={startDate} /></div>\r\n//             <div className=\"right\">\r\n//             <div><Face /></div>\r\n//                 <div className=\"noticeBoard\">Notice Board</div>\r\n//              <div className =\"submit_EHS\">\r\n//                  <div type=\"file\" className=\"upload\">UPLOAD</div>\r\n//                  <div className=\"submit\">SUBMIT</div>\r\n//              </div>\r\n\r\n// </div>\r\n//         </div>\r\n        \r\n\r\n//       </div>\r\n//       </>\r\n      \r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Ehstudent","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\authContexts\\authContext.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\searchExams.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\LoaderC.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\classRoom.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\examContexts\\AppContext.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\classContexts\\classContext.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\correspondingExams\\Noresults.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\Noresults.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\model.js",["309"],"import React,{ useState, useContext,useEffect } from 'react';\r\nimport classRoomContext from '../../context/classContexts/classContext';\r\n\r\nconst Model = ({open,isClose,children}) => {\r\n\r\n    const {add_classroom , editDetails ,updateDetails } = useContext( classRoomContext );\r\n    \r\n    const MODEL_STYLES={\r\n       position: 'fixed',\r\n       top: '50%',\r\n       left: '50%',\r\n       transform: 'translate(-50%, -50%)',\r\n       backgroundColor: 'white',\r\n       borderRadius:'1rem',\r\n       padding: '10px',\r\n       zIndex: 1000,\r\n       width:'30%',\r\n       textAlign :'center',\r\n       height:'50vh'\r\n    }\r\n    const OVERLAY_STYLES={\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        backgroundColor: 'rgba(70, 70, 70, 49%)',\r\n       \r\n      \r\n        zIndex: 1000\r\n    }\r\n    const INPUT_STYLES={\r\n        border:'3px solid white'\r\n        ,width:'200%',\r\n        height:'25%',\r\n        padding:'10%',\r\n        fontSize:'large',\r\n        marginLeft:'-50%',\r\n        color:'white',\r\n        background: 'transparent',\r\n        borderRadius:'20px'\r\n    };\r\n    const FORM_STYLES={backgroundColor:'#1DA6CF', height:'68.7%',borderRadius:'10px',marginTop:'2%'};\r\n    const BUTTON_STYLES={border:'1px solid white',borderRadius:'1em',fontSize:'130%',padding:'6% 0% 6% 0%',margin:'0 3% -5% 3%',cursor:'pointer',color:'white',backgroundColor:'blue'};\r\n\r\n    const [classroom,setClassroom]=useState({\r\n        name:'',\r\n        strength:''\r\n    });\r\n    const [perform,setPerform]=useState('Create');\r\n    useEffect(() => {\r\n        const fetchData1 = async ()=>{\r\n            const changeDetails=(name,number)=>{\r\n                setClassroom({\r\n                    name:name,\r\n                    strength:number\r\n                })\r\n             }\r\n            if(editDetails!==null && open===true){\r\n              changeDetails(editDetails.name, editDetails.strength);\r\n              setPerform('Edit');\r\n            }\r\n            else{\r\n              changeDetails('','');\r\n              setPerform('Create');\r\n              \r\n            }\r\n        }\r\n        fetchData1();\r\n    }, [open])\r\n\r\n    const { name, strength } = classroom ;\r\n\r\n    const onChange=(e)=>{\r\n        setClassroom({\r\n            ...classroom,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    const onSubmit= async (e)=>{\r\n        e.preventDefault();\r\n        classroom.strength=parseInt(classroom.strength);\r\n        if(editDetails!==null){\r\n            await updateDetails(editDetails._id,classroom);\r\n        }else{\r\n            await add_classroom(classroom);\r\n        }\r\n        setClassroom({\r\n            name:'',\r\n            strength:'',\r\n        })\r\n        isClose();\r\n    }\r\n    return (\r\n        open!==true?null:\r\n        <div >\r\n            <div style={OVERLAY_STYLES} />\r\n            <div style={MODEL_STYLES}>\r\n              <button onClick={isClose} style={{marginLeft:\"80%\",marginTop:\"0vh\"}}>&#10060;</button><br/><br/>\r\n            <span style={{fontSize:\"160%\",marginTop:\"0\",color:'#0078A6'}}>ADD NEW CLASS :</span>\r\n               <br/><br/>\r\n               <span style={{border:'1px solid blue',padding:'2px'}}>\r\n                   {children}\r\n                </span>\r\n              <form className=\"probinfo\" style={FORM_STYLES} onSubmit={onSubmit}>\r\n                 <input className=\"username\" style={INPUT_STYLES} type=\"text\" name=\"name\" value={name}  onChange={onChange} placeholder=\"Classroom Name\"  required autoComplete=\"off\" /><br/>\r\n                 <input className=\"username\" style={INPUT_STYLES} type=\"number\" name=\"strength\" value={strength} onChange={onChange} placeholder=\"Class Strength\"  required autoComplete=\"off\" /><br/>\r\n                 <input type=\"submit\" value={perform} className=\"button\" style={BUTTON_STYLES} />\r\n              </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model;","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\Loader.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\particularExamDetails\\Noresults.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\studentContexts\\StudentContext.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\studentContexts\\studentReducer.js",["310"],"import { GET_STUDENTS , CLEAR_SEARCH_S , SEARCH_STUDENTS_NAME , SEARCH_STUDENTS_ID , CHECKED_STATUS } from '../types';\r\n\r\nexport default (state,{type,payload})=>{\r\n   switch(type){\r\n        case GET_STUDENTS:\r\n            return {\r\n                ...state,\r\n                studentsofExam:payload\r\n            }\r\n        case CHECKED_STATUS:\r\n            return{\r\n                ...state,\r\n                checkedStatus:state.studentsofExam.filter(student =>student.status===true).length\r\n            }\r\n        case SEARCH_STUDENTS_NAME :\r\n           const reg=new RegExp(`${payload}`,'gi');\r\n           return{\r\n               ...state,\r\n               search:state.studentsofExam.filter(student=>student.name.match(reg))\r\n           }\r\n        case SEARCH_STUDENTS_ID :\r\n            const regI=new RegExp(`${payload}`,'gi');\r\n            return{\r\n                ...state,\r\n                search:state.studentsofExam.filter(student=>String(student.scholarId).match(regI))\r\n            }\r\n       case CLEAR_SEARCH_S :\r\n           return {\r\n               ...state,\r\n               search:null          \r\n           }    \r\n        default:\r\n            return state;\r\n   }\r\n}","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\classroom_teacher_signup\\classroomSearch.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\types.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\studentAnswerScript.js\\studentCSS.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\webcamContext\\webcamContext.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\webcamContext\\webcamReducer.js",["311"],"import { CHECK_WEB } from '../types';\r\n\r\nexport default (state,{type,payload})=>{\r\n   switch(type){\r\n        case CHECK_WEB:\r\n            return {\r\n                ...state,\r\n                check_web_cam:payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n   }\r\n}","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\authContexts\\authReducer.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\classContexts\\classReducer.js",["312","313"],"import { SEARCH_CLASSROOM , CLEAR_SEARCH, ADD_CLASSROOM, DELETE_CLASSROOM, CHANGE_IS_OPEN, EDIT_DETAILS ,CLEAR_EDIT,UPDATE_DETAILS , GET_CLASSROOM , CLASSROOM_ERROR} from '../types';\r\n\r\nexport default (state,{type,payload})=>{\r\n   switch(type){\r\n        case UPDATE_DETAILS:\r\n            return{\r\n                ...state,\r\n                classRooms:state.classRooms.map(classRoom=>classRoom._id===payload._id ? payload : classRoom )\r\n            }\r\n        case CLEAR_EDIT:\r\n            return{\r\n                ...state,\r\n                editDetails:null\r\n            }\r\n        case EDIT_DETAILS:\r\n            return {\r\n                ...state,\r\n                editDetails:payload\r\n            }\r\n        case CHANGE_IS_OPEN:\r\n            return {\r\n                ...state,\r\n                isOpen:!state.isOpen\r\n            }\r\n        case DELETE_CLASSROOM:\r\n          return{\r\n             ...state,\r\n             classRooms:state.classRooms.filter(classRoom=>classRoom._id!==payload)\r\n          }\r\n       case ADD_CLASSROOM:\r\n           return{\r\n               ...state,\r\n               classRooms:[...state.classRooms,payload]\r\n           }\r\n       case SEARCH_CLASSROOM :\r\n           const reg=new RegExp(`${payload}`,'gi');\r\n           return{\r\n               ...state,\r\n               search:state.classRooms.filter(classRoom=>classRoom.name.match(reg))\r\n           }\r\n       case CLEAR_SEARCH :\r\n           return {\r\n               ...state,\r\n               search:null          \r\n           }\r\n        case GET_CLASSROOM:\r\n            return {\r\n                ...state,\r\n                classRooms:payload\r\n            }\r\n        default:\r\n            return state;\r\n   }\r\n}","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\examContexts\\AppReducer.js",["314"],"import { STORE_EXAM , GET_EXAMS ,SEARCH_EXAM_BY_NAME , CLEAR_EXAM_BY_NAME } from '../types';\r\n\r\nexport default (state,{type,payload})=>{\r\n   switch(type){\r\n       case STORE_EXAM:\r\n        return{\r\n          ...state,\r\n          exams:payload    \r\n        }      \r\n       case GET_EXAMS:\r\n          return {\r\n              ...state,\r\n              correspondingExams:payload\r\n          }\r\n        case SEARCH_EXAM_BY_NAME :\r\n          const reg=new RegExp(`${payload}`,'gi');\r\n          return{\r\n              ...state,\r\n              search:state.correspondingExams.filter(exam=>exam.name.match(reg))\r\n          }\r\n        case CLEAR_EXAM_BY_NAME :\r\n            return {\r\n                ...state,\r\n                search:null          \r\n            }       \r\n       default:\r\n           return state;\r\n   }\r\n}","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\exam\\examCSS.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\navbar\\Navbar.js",["315","316","317"],"import React, { Component } from 'react';\r\nimport { MenuItems } from \"./Menuitems\"\r\nimport { Button } from \"./Button\"\r\nimport '../../css/Navbar.css';\r\n\r\nimport logo from '../../img/Porikkha_logo.png';\r\n\r\nclass Navbar extends Component {\r\n    state = { clicked: false }\r\n\r\n    handleClick = () => {\r\n        this.setState({ clicked: !this.state.clicked })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n\r\n            <nav className=\"NavbarItems\">\r\n                <p className=\"navbar-logo\">\r\n                    <img src={logo} style={{width:'16%',marginLeft:'0px'}}/>\r\n                </p>\r\n                {/* <Button>Add New</Button> */}\r\n            </nav>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\Timer\\Timer.js",["318"],"\r\nimport React, { Component } from \"react\";\r\nimport \"./Timer.css\";\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.countDownId = null;\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      expired: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.countDownId = setInterval(this.timerInit, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.countDownId) {\r\n      clearInterval(this.countDownId);\r\n    }\r\n  }\r\n\r\n  timerInit = () => {\r\n    const { startDate } = this.props;\r\n    console.log(startDate);\r\n    const now = new Date().getTime();\r\n    if (!startDate) {\r\n      this.setState({ expired: true });\r\n      return;\r\n    }\r\n    const countDownStartDate = new Date(startDate).getTime();\r\n    const distance = countDownStartDate - now;\r\n    const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor(\r\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n    // For countdown is finished\r\n    if (distance < 0) {\r\n      clearInterval(this.countDownId);\r\n      this.setState({\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        expired: true\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ days, hours, minutes, seconds, expired: false });\r\n  };\r\n\r\n  render() {\r\n    const { days, hours, minutes, seconds, expired } = this.state;\r\n    if (expired) {\r\n      return <div className=\"expired\">Expired :(</div>;\r\n    }\r\n    return (\r\n      <div className=\"timer\">\r\n        \r\n        <div>\r\n          {hours}\r\n          <span>h</span>\r\n        </div>\r\n        <div>\r\n          {minutes}\r\n          <span>m</span>\r\n        </div>\r\n        <div>\r\n          {seconds}\r\n          <span>s</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;\r\n","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\Face\\Face.js",["319","320","321","322","323"],"import React, {useRef,useEffect, useState,useContext} from 'react';\r\n// import Face from \"./components/Face\";\r\nimport {drawMesh} from \"./utilities\";\r\n\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as facemesh from \"@tensorflow-models/facemesh\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./Face.css\";\r\nimport WebCamContext from \"../../../context/webcamContext/webcamContext\";\r\n\r\nvar count =0;\r\nvar warning_num =5;\r\n// var stable = 0;\r\nvar xyz;\r\nvar warn=\"good\";\r\nlet check;\r\nfunction Face() {\r\n\r\n\r\nconst {CheckWebCam}=useContext(WebCamContext);\r\n\r\nconst webcamRef = useRef(null);\r\nconst canvasRef = useRef(null);\r\n\r\nconst [checkThis,setCheckThis]=useState();\r\nconst [checkIt,setCheckIt]=useState();\r\n\r\n\r\n\r\nuseEffect(async ()=>{\r\n\r\n  setCheckThis( webcamRef.current.state.hasUserMedia);\r\n  check=checkThis;\r\nconsole.log(webcamRef);\r\n  // CheckWebCam(checkThis);\r\n  // check=await webcamRef.current.state.hasUserMedia;\r\n  // console.log(webcamRef.current.state.hasUserMedia);\r\n  // if(!check){\r\n  //   alert(\"Allow your webcam or else you will be unable to give your exam\");       \r\n  // }\r\n  // setInterval(()=>{\r\n  //   navigator.getMedia = ( navigator.getUserMedia || // use the proper vendor prefix\r\n  //     navigator.webkitGetUserMedia ||\r\n  //     navigator.mozGetUserMedia ||\r\n  //     navigator.msGetUserMedia);\r\n\r\n  // navigator.getMedia({video: true}, function() {\r\n  //   console.log(\"on\");\r\n  //   setCheckIt(true)\r\n  // }, function() {\r\n  //   setCheckIt(false)\r\n  //     console.log(\"off\");\r\n  // });\r\n  // },2000)\r\n  \r\n \r\n},[checkThis,checkIt,webcamRef])\r\n\r\n\r\nconst runFacemesh = async()=>{\r\n  const net = await facemesh.load({\r\n    inputResolution:{width:500,height:480},scale:0.8 \r\n  });\r\n  \r\n  setInterval(()=>{\r\n  \r\n    navigator.getMedia = ( navigator.getUserMedia || // use the proper vendor prefix\r\n      navigator.webkitGetUserMedia ||\r\n      navigator.mozGetUserMedia ||\r\n      navigator.msGetUserMedia);\r\n  \r\n  navigator.getMedia({video: true}, function() {\r\n    detect(net)  \r\n    \r\n  }, function() {\r\n    \r\n      console.log(\"off\");\r\n  });\r\n\r\n    \r\n    \r\n  },1000)\r\n\r\n};\r\n\r\nconst CheckWebCams=()=>{\r\n  navigator.getMedia = ( navigator.getUserMedia || // use the proper vendor prefix\r\n    navigator.webkitGetUserMedia ||\r\n    navigator.mozGetUserMedia ||\r\n    navigator.msGetUserMedia);\r\n\r\nnavigator.getMedia({video: true}, function() {\r\n  console.log(\"on\");\r\n  setCheckIt(true)\r\n  runFacemesh();\r\n  CheckWebCam(true)\r\n}, function() {\r\n  setCheckIt(false)\r\n  runFacemesh();\r\n  CheckWebCam(false)\r\n    console.log(\"off\");\r\n});\r\n}\r\n\r\nsetInterval(()=>{\r\n  \r\n  CheckWebCams();\r\n},10000)\r\n\r\n\r\n\r\nconst detect = async(net)=>{\r\n  \r\n  if(\r\n    typeof webcamRef.current!==\"undefined\" && \r\n    webcamRef.current !==null && \r\n    webcamRef.current.video.readyState === 4)\r\n    {\r\n      // setCheck(true)\r\n      // navigator.mediaDevices.getUserMedia({video:true,audio:true},(stream)=>{\r\n      //   console.log(stream);\r\n      //   if(!stream.getVideoTracks().length>0){\r\n          \r\n      //   }\r\n      // })\r\n    //  const video = webcamRef.current.video;\r\n    //  const videoWidth = webcamRef.current.video.videoWidth;\r\n    //  const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n    //  webcamRef.current.video.width = videoWidth;\r\n    //  webcamRef.current.video.height = videoHeight;\r\n\r\n    //  canvasRef.current.width = videoWidth;\r\n    //  canvasRef.current.height = videoHeight;\r\n    const video = webcamRef.current.video;\r\n\r\n    const videoWidth = webcamRef.current.video.videoWidth;\r\n    const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n    // console.log();\r\n    // Set video width\r\n    // webcamRef.current.video.width = videoWidth;\r\n    // webcamRef.current.video.height = videoHeight;\r\n\r\n\r\n    // Set canvas width\r\n    canvasRef.current.width = videoWidth;\r\n    canvasRef.current.height = videoHeight;\r\n     const face = await net.estimateFaces(video);\r\n     \r\n  //    if(face.length === 0){\r\n       \r\n  //     //  document.querySelector(\".popup_setup\").style.display=\"block\";\r\n  //     // alert(\"No face detected\")\r\n  // // alert(\"no face detected\")\r\n  //     count++;\r\n      \r\n  //    }\r\n     \r\n     if(face.length === 0){\r\n     warning_num--;\r\n\r\n      alert(warning_num + \" more times and you will be disqualified\");\r\n      count=0;\r\n     }\r\n     if(warning_num<1){\r\n         alert(\"You are disquilified\");\r\n     }\r\n    // if(xyz===face){\r\n    //   // stable++;\r\n    //   xyz =face;\r\n    // }\r\n\r\n   \r\n    \r\n     if(face.length !== 0){\r\n      //  console.log(xyz);\r\n      }\r\n    if(face.length >1){\r\n      alert(\"more than 1 face detected\");\r\n    }\r\n     //drawing\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n    drawMesh(face,ctx);\r\n  }\r\n\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <div className=\"model_pop\">\r\n      <div>\r\n          {/* UNable */}\r\n      </div>\r\n    </div>\r\n    <Webcam ref={webcamRef} style={\r\n      {\r\n        // position:\"absolute\",\r\n        marginLeft:\"auto\",\r\n        marginRight:\"auto\",\r\n        textAlign:\"center\",\r\n        top:\"200px\",\r\n        left:\"0px\",\r\n        right:\"0px\",\r\n        zIndex:10,\r\n        width:500,\r\n        height:390,\r\n        borderRadius:\"0%\",\r\n        \r\n\r\n      }\r\n    }/>\r\n  <canvas ref={canvasRef} style={\r\n      {\r\n        position:\"absolute\",\r\n        marginLeft:\"auto\",\r\n        marginRight:\"1%\",\r\n        textAlign:\"center\",\r\n        top:\"440px\",\r\n        left:\"0px\",\r\n        right:\"30px\",\r\n        zIndex:10,\r\n        width:500,\r\n        height:390\r\n        \r\n      }\r\n    }/>\r\n   \r\n   </div>\r\n  );\r\n}\r\n\r\nexport {check};\r\nexport default Face","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\Timer\\Timer.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\navbar\\Menuitems.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\navbar\\Button.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\student_Exam_hall\\Face\\utilities.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\fill_mcq_questions.js",["324","325"],"import React,{ useState , useEffect , useContext } from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport queryString from 'query-string';\r\n\r\nimport '../../css/mcq.css'\r\n\r\nimport McqContext from '../../context/MCQContexts/McqContext';\r\n\r\nimport Navbar from '../navbar/Navbar';\r\n\r\nconst Fill_mcq_questions = ({location}) => {\r\n\r\n    const [ _id , setId ] = useState('');\r\n\r\n    const [ name , setName ] = useState('');\r\n\r\n    const [ room , setRoom ] = useState('');\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchData = async()=>{\r\n        \r\n            const { name , room , _id  } = queryString.parse(location.search);\r\n\r\n            setId(_id);\r\n\r\n            setName(name);\r\n            \r\n            setRoom(room);\r\n        }\r\n        \r\n        fetchData();\r\n\r\n    },[location.search])\r\n\r\n    const { mcqs , fillUps , AddFillUps , AddMcqs , Edit_MCQ_Details , Edit_Fill_Up_Details } =  useContext(McqContext);\r\n\r\n    const [ questions , setQuestions ] = useState(mcqs);\r\n\r\n    const [ fillUp , setFillUp ] = useState(fillUps);\r\n\r\n    // const [ fileD , setFileD ] = useState(null); \r\n\r\n    // const [ response , setResponse ] = useState(null);\r\n\r\n    const mcqQuestion = {\r\n        questionNo:mcqs.length+1,\r\n        question:'',\r\n        noOfOptions:'',\r\n        options:[{\r\n           optionNo:1,\r\n           option:''\r\n        }],\r\n        correct_answer:'',\r\n        student_response:'',\r\n        marks:''\r\n        // mcqPaperType:'',\r\n        // mcqPaper:null\r\n    }\r\n\r\n    const fillUpQuestion={\r\n        questionNo:fillUps.length+1,\r\n        question:'',\r\n        correct_answer:'',\r\n        student_response:'',\r\n        marks:''\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const fetchData = () => {\r\n            setQuestions([\r\n                ...mcqs,\r\n                mcqQuestion\r\n            ])\r\n    \r\n            setFillUp([\r\n                ...fillUps,\r\n                fillUpQuestion\r\n            ])\r\n        }\r\n        fetchData()\r\n    }, [mcqs,fillUps])\r\n\r\n    // const setFile = (e)=>{\r\n    //     setFileD(e.target.files[0]);\r\n    // }\r\n\r\n    const handleChangeMcq = async (e)=>{\r\n\r\n        console.log(e.target.parentElement.parentElement.id);\r\n\r\n        const list = await questions.map(q=>{\r\n          \r\n            if(parseInt(q.questionNo) === parseInt(e.target.parentElement.parentElement.id)){\r\n\r\n                if(e.target.name==='options'){\r\n                    \r\n                    let list1 = q.options.map(op=>{\r\n                       \r\n                        if(parseInt(op.optionNo) === parseInt(e.target.id)){\r\n                            return {\r\n                                ...op,\r\n                                option:e.target.value\r\n                            }\r\n                        }\r\n                        else{\r\n                            return op;\r\n                        }\r\n                    })\r\n                    return {\r\n                       ...q,\r\n                       options:list1\r\n                    }\r\n                }\r\n\r\n                if(e.target.name === 'noOfOptions'){\r\n                    \r\n                    let list2 = [];\r\n                    \r\n                    for(let i=0 ; i<e.target.value ; i++ ){\r\n                        list2.push({\r\n                            optionNo:`${i+1}`,\r\n                            option:''\r\n                        })\r\n                    }\r\n                    return{\r\n                        ...q,\r\n                        noOfOptions:e.target.value,\r\n                        options:list2\r\n                    }\r\n                }\r\n\r\n                if( e.target.name==='question' || e.target.name==='correct_answer' || e.target.name==='marks' ){\r\n\r\n                 return {\r\n                     ...q,\r\n                     [e.target.name]:e.target.value\r\n                 }\r\n               }\r\n            }\r\n            else{\r\n                return q;       \r\n            }\r\n        })\r\n        await setQuestions(list);\r\n        console.log(list);\r\n    }\r\n\r\n    const handleChangeFillUp = async (e)=>{\r\n\r\n        const list = await fillUp.map(q=>{\r\n          \r\n            if(parseInt(q.questionNo) === parseInt(e.target.parentElement.id)){\r\n                 return {\r\n                    ...q,\r\n                    [e.target.name]:e.target.value\r\n                 }\r\n            }\r\n            else{\r\n                return q;      \r\n            }\r\n        })\r\n        await setFillUp(list);\r\n        console.log(list);\r\n    }\r\n\r\n    const onSubmit=async (e)=>{\r\n\r\n        e.preventDefault();\r\n\r\n    //     if(fileD && !(fileD.type==='image/png' || fileD.type==='image/jpg' || fileD.type==='image/jpeg' )){\r\n        \r\n    //         setResponse(`Please Upload a image or pdf less than 1MB `);\r\n    //         return;\r\n    //     }\r\n\r\n    //    if(fileD && fileD.size>100000){\r\n       \r\n    //        setResponse(`Please Upload a image or pdf less than 100kb ${fileD.size} kb is not allowed`);\r\n    //        return;\r\n    //     }\r\n        \r\n        if( parseInt( e.target.id ) === parseInt( questions.length )){\r\n    \r\n            console.log(\"question\",questions[e.target.id-1]);\r\n\r\n            await AddMcqs(questions[e.target.id-1] , _id);\r\n            // await AddMcqs(questions[e.target.id-1],fileD);\r\n    \r\n            await setQuestions([...mcqs,mcqQuestion]);\r\n\r\n            console.log(\"mcqs\",mcqs);\r\n\r\n            console.log(\"Questions\",questions);\r\n\r\n        }else{\r\n            //edit\r\n            await Edit_MCQ_Details( questions[e.target.id-1] );\r\n \r\n            await setQuestions(mcqs);\r\n        }\r\n\r\n        console.log(questions);\r\n    }\r\n\r\n    const onSubmitFillUp = async (e)=>{\r\n       \r\n        e.preventDefault(e.target.id);\r\n\r\n        if( parseInt( e.target.id ) === parseInt( fillUp.length )){\r\n\r\n           await AddFillUps(fillUp[e.target.id-1] , _id);\r\n\r\n           await setFillUp([...fillUps,fillUpQuestion]);\r\n        \r\n        }else{\r\n           await Edit_Fill_Up_Details(fillUp[e.target.id-1] );\r\n\r\n           await setFillUp(fillUps);\r\n       }\r\n        console.log(fillUp);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n           <div className='containerMcqForm MCQ3rd' style={{overflowY:'none'}} >\r\n           \r\n            <h1 style={{transform:'translate(0%,50%)',marginTop:'0vh',fontSize:'2.1rem'}}>Fill_mcq_questions</h1>\r\n\r\n            {questions.map(q=>\r\n              <form key={q.questionNo} id={q.questionNo} onSubmit={onSubmit}>\r\n                  \r\n                   <div>\r\n                      <span style={{fontSize:'160%'}}>{q.questionNo}.</span><br></br>\r\n                   \r\n                      <input style={{background:'#EFEFEF'}} type='text' name='question' value={q.question} placeholder='Enter question' onChange={handleChangeMcq} />\r\n\r\n                      {/* <input type='file' name='questionFile' placeholder='Add Question as Image' onChange={setFile}/>     */}\r\n                     \r\n                      <input style={{background:'#EFEFEF'}}  type='Number' name='noOfOptions' value={q.noOfOptions} placeholder='Enter no of options' required onChange={handleChangeMcq} /> \r\n                    </div>\r\n                    <div className='enteroptions'>\r\n                       {q.options.map(op=>\r\n                           <input style={{background:'#EFEFEF',marginLeft:'5px'}}  key={op.optionNo} id={op.optionNo} name='options' value={op.option} placeholder='Enter options'  required onChange={handleChangeMcq}  />\r\n                        )}\r\n                    </div> \r\n                    <div>\r\n                        <input style={{background:'#EFEFEF'}} type='text' name='correct_answer' value={q.correct_answer} placeholder='Correct Options.Use space for multiple choice : e.g. 1 2' required onChange={handleChangeMcq} />    \r\n                         \r\n                        <input style={{background:'#EFEFEF'}}  type='Number' name='marks' value={q.marks} placeholder='Enter Marks' required onChange={handleChangeMcq} />    \r\n                    </div>\r\n                    <button style={{width:'60%',marginBottom:'10%',margin:'auto',transform:'translateX(30%)',left:'20%',background:'#EFEFEF',padding:'5px'}}   type=\"submit\">{parseInt( q.questionNo ) === parseInt( questions.length ) ? 'Add Question' : 'Edit Question' }</button>          \r\n              </form>   \r\n            )}\r\n            \r\n            <h1 style={{transform:'translate(0%,50%)',fontSize:'2.1rem'}}>Fill_up_the_blanks</h1>\r\n\r\n            {fillUp.map(q=>\r\n            \r\n              <form key={q.questionNo} onSubmit={onSubmitFillUp} id={q.questionNo}>\r\n              \r\n                  <span style={{fontSize:'160%'}}>{q.questionNo}.</span><br></br>\r\n              \r\n                  <input style={{background:'#EFEFEF'}} type='text' name='question' value={q.question} placeholder='Enter FILL up' required onChange={handleChangeFillUp} />    \r\n                  \r\n                  <input style={{background:'#EFEFEF'}} type='text' name='correct_answer' value={q.correct_answer} placeholder='Enter Correct Option' required onChange={handleChangeFillUp} />    \r\n\r\n                  <input style={{background:'#EFEFEF'}} type='Number' name='marks' value={q.marks} placeholder='Enter Marks' required onChange={handleChangeFillUp} />    \r\n                  \r\n                  <button style={{width:'60%',marginBottom:'15%',border:'1px solid grey',margin:'auto',transform:'translateX(30%)',left:'20%',background:'#EFEFEF',padding:'5px'}} type=\"submit\">{parseInt( q.questionNo ) === parseInt( fillUp.length ) ? 'Add Question' : 'Edit Question' }</button>          \r\n              </form>   \r\n            )}\r\n            \r\n            <Link to={`/Classhall_Teacher?name=${name}&room=${room}&_id=${_id}`}>\r\n                    <button className=\"SEfinal\" style={{marginBottom:'5%',transform:'translateX(-10%)', width:'300px'}}>Go to Exam Hall Section</button>\r\n            </Link>\r\n            \r\n            <div style={{height:'5vh'}}></div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Fill_mcq_questions\r\n","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\Final_Submission.js",["326","327","328","329","330","331","332","333","334","335","336","337","338"],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\give_quiz.js",["339","340","341","342","343","344","345","346"],"import React,{ useState , useContext , useEffect } from 'react'\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport io from 'socket.io-client';\r\n\r\nimport queryString from 'query-string';\r\n\r\nimport '../../css/mcq.css'\r\n\r\nimport McqContext from '../../context/MCQContexts/McqContext';\r\n\r\nimport axios from 'axios';\r\n\r\nimport Navbar from '../navbar/Navbar';\r\n\r\nimport Timer from '../Timer/Timer';\r\n\r\nlet socket;\r\n\r\nconst Give_quiz = ({location}) => {\r\n\r\n    const { mcqs , fillUps , Edit_MCQ_Details , Edit_Fill_Up_Details } = useContext(McqContext);\r\n\r\n    const [ questions , setQuestions ] = useState([]);\r\n\r\n    const [ fillUp , setFillUp ] = useState([]);\r\n\r\n    const [ studentDetails , setStudentDetails ] = useState({\r\n        mcq:[],\r\n        fillUp:[]\r\n    });\r\n\r\n    const [ count , setCount ] = useState(0);\r\n\r\n    const [ countF , setCountF ] = useState(0);\r\n\r\n    const [ answer , setAnswer ] = useState('');\r\n\r\n    const [ _id , setId ] = useState(null);\r\n\r\n    const [ student_id , setStudentId ] = useState(null);\r\n\r\n    const [registered , setRegistered ] = useState(false);\r\n\r\n    const [error,setError]=useState(null);\r\n\r\n    const [response , setResponse] = useState('');\r\n\r\n    const [ navigate , setNavigate ] = useState(true);\r\n\r\n    const [ multipleChoice , setMultipleChoice ] = useState(true);\r\n\r\n    const [ startDate , setstartDate ] = useState(0);\r\n\r\n    const END_POINT = 'localhost:5000';\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchData = async()=>{\r\n        \r\n            const { name , room , scholarId , _id , email , studentId  } = queryString.parse(location.search);\r\n\r\n            setId(_id);\r\n\r\n            setStudentId(studentId)\r\n\r\n            const response = await axios.get(`/objective_exam/getExamById/${_id}`);\r\n\r\n            console.log('Response',response);\r\n\r\n            //navigationStatus\r\n            setNavigate(response.data.exam.navigationStatus);\r\n            \r\n            setMultipleChoice(response.data.exam.mcqType);\r\n\r\n            if(response.data.error!==undefined){\r\n               setError(response.data.error);\r\n               return;\r\n            }\r\n\r\n           setQuestions(response.data.mcqs);\r\n\r\n           setFillUp(response.data.fill_ups);\r\n\r\n           const studentResponse = await axios.get(`/student_objective_exam/${studentId}`);\r\n\r\n           setStudentDetails(studentResponse.data.student);\r\n\r\n            if(studentResponse.data.error!==undefined){\r\n               setError(studentResponse.data.error);\r\n               return;\r\n            }\r\n\r\n           setRegistered(true);\r\n\r\n           socket = io();\r\n\r\n           socket.emit( 'joinRoom' , { username: name , room } );\r\n\r\n           //teacher portal\r\n\r\n           socket.on('getUsersToRoom',({room , users})=>{\r\n               console.log(users);\r\n           }) \r\n\r\n           const x = (response.data.exam.timeLength.split(\":\")[0]*60*60 + response.data.exam.timeLength.split(\":\")[1]*60 )*1000 ;\r\n\r\n           console.log(response.data.exam.timeLength.split(\":\")[0] ,\" \",response.data.exam.timeLength.split(\":\")[1], x);\r\n          \r\n           setstartDate(response.data.exam.startTime + x);\r\n           \r\n           return()=>{\r\n               socket.on('disconnect');\r\n\r\n               //teacher portal\r\n\r\n               socket.on('getUsersToRoom',({room , users})=>{\r\n                   console.log(users);\r\n               }) \r\n               \r\n               socket.off();\r\n           }\r\n        }\r\n        \r\n        fetchData();\r\n\r\n    },[location.search, END_POINT])\r\n\r\n    const goToNextMcq = (e)=>{\r\n\r\n        console.log(count);\r\n\r\n        setCount(count+1);\r\n    }\r\n\r\n    const onSubmit = async (e)=>{\r\n\r\n        e.preventDefault();\r\n\r\n        let data;\r\n\r\n        const fetchData = async ()=>{\r\n            \r\n            if(!( multipleChoice === 'Single Option Answer' )){\r\n                let x = e.target.children[1].children.length;\r\n    \r\n                let studentResponse ='';\r\n        \r\n                for(let i=0 ; i<x ; i++ ){\r\n        \r\n                    if(e.target.children[1].children[i].children[0].checked){\r\n                        studentResponse = studentResponse + ' ' + e.target.children[1].children[i].children[0].value;\r\n                    }\r\n                }\r\n        \r\n                const list = await studentDetails.mcq.map(res=>{\r\n                 \r\n                    if(parseInt(res.questionNo)===parseInt(e.target.id)){\r\n                 \r\n                        return{\r\n                            ...res,\r\n                            studentResponse:String(studentResponse)\r\n                        }\r\n                    }\r\n                    return res;\r\n                })\r\n        \r\n                setStudentDetails({\r\n                    ...studentDetails,\r\n                    mcq:list\r\n                });\r\n        \r\n                data = {\r\n                    mcq:list\r\n                }\r\n                console.log('mcq',list);\r\n            }\r\n            else{\r\n                data = {\r\n                    mcq:studentDetails.mcq\r\n                }\r\n            }\r\n        }\r\n\r\n        await fetchData();\r\n\r\n        const config ={\r\n           header:{\r\n             'Content-type':'application/json'\r\n          }\r\n        }\r\n\r\n        axios.patch(`/student_objective_exam/mcq/${student_id}`,data,config)\r\n            \r\n        .then((response) => {\r\n\r\n               console.log(response.data);\r\n               \r\n                if(response.data.error!==undefined){\r\n                    \r\n                    setResponse(response.data.error);\r\n                    \r\n                    return;\r\n                }\r\n                          \r\n        }).catch((error) => {\r\n            \r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const goToNextFillUp = (e)=>{\r\n\r\n        e.preventDefault();\r\n\r\n        setCountF(countF+1);\r\n        \r\n        setCount(count+1);\r\n        \r\n        setAnswer('');\r\n    }\r\n\r\n    const onSubmitFillUp = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = { \r\n            fillUp : studentDetails.fillUp\r\n        }\r\n\r\n        const config ={\r\n            header:{\r\n              'Content-type':'application/json'\r\n           }\r\n         }\r\n \r\n         axios.patch(`/student_objective_exam/fillUp/${student_id}`,data,config)\r\n             \r\n         .then((response) => {\r\n \r\n                console.log(response.data);\r\n                \r\n                 if(response.data.error!==undefined){\r\n                     \r\n                     setResponse(response.data.error);\r\n                     \r\n                     return;\r\n                 }\r\n                           \r\n         }).catch((error) => {\r\n             \r\n             console.log(error);\r\n         });\r\n    }\r\n\r\n    const handleChangeMcq = async (e)=>{\r\n\r\n        const list = await studentDetails.mcq.map(res=>{\r\n         \r\n            if(parseInt(res.questionNo)===parseInt(e.target.name)){\r\n         \r\n                return{\r\n                    ...res,\r\n                    studentResponse:e.target.value\r\n                }\r\n            }\r\n            return res;\r\n        })\r\n\r\n        setStudentDetails({\r\n            ...studentDetails,\r\n            mcq:list\r\n        });\r\n\r\n        console.log(list);\r\n    }\r\n\r\n    const handleChangeFillUp = async (e)=>{\r\n\r\n        setAnswer(e.target.value);\r\n\r\n        const list = await studentDetails.fillUp.map(res=>{\r\n\r\n            if(parseInt(res.questionNo)===parseInt(e.target.name)){\r\n            \r\n                return{\r\n                    ...res,\r\n                    studentResponse:e.target.value\r\n                }\r\n            }\r\n            return res;\r\n        })\r\n\r\n        setStudentDetails({\r\n            ...studentDetails,\r\n            fillUp:list\r\n        });\r\n\r\n        console.log(list);\r\n    }\r\n\r\n    const handleClickMcq = (e)=>{\r\n\r\n        if(!navigate){\r\n            return;\r\n        }\r\n       \r\n        setCount(e.target.id-1);\r\n\r\n        setCountF(0);\r\n    }\r\n\r\n    const handleClickFillUp = (e)=>{\r\n\r\n        if(!navigate){\r\n            return;\r\n        }\r\n        \r\n        setCountF( e.target.id - 1 );\r\n\r\n        setCount( e.target.id - 1 + questions.length ); \r\n    }\r\n\r\n    const flexQuestion = {\r\n        height:'40px',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        justifyContent:'space-around',\r\n        alignItems:'center',\r\n        marginLeft:'20px'\r\n    }\r\n\r\n    const flexBox = {\r\n       marginTop:'25px',\r\n       width:'25vw',\r\n       display:'flex',\r\n       alignItems:'center',\r\n       flexWrap:'wrap',\r\n       minHeight:'1vh',\r\n       paddingBottom:'10px'\r\n    }\r\n\r\n    return (\r\n\r\n     <div style={{width:'100vw', fontFamily:'sans-serif',overflowX:'hidden'}}>\r\n\r\n        <Navbar />\r\n\r\n        <div  className='containerMcqForm MCQ3rd'>\r\n            <h1 style={{ transform:'translateX(0%)' }}>Give Quiz</h1>\r\n\r\n            { response!=='' ? response : '' }\r\n\r\n            <div style={{ position:'absolute' , marginTop:'30vh',marginLeft:'65vw' }}>\r\n               \r\n               <h2 style={{textAlign:'center'}}>Time Remaining : </h2>\r\n               \r\n               <Timer startDate={startDate}/>\r\n            </div>\r\n\r\n            <div>\r\n                <div style={{position:'absolute',marginTop:'-18vh',marginLeft:'20vw',padding:'10px',background:'#EFEFEF'}}>\r\n                  \r\n                  <h2 style={{textAlign:'center'}}>Mcq</h2>\r\n                  \r\n                  <div style={flexBox}>\r\n                   \r\n                    { studentDetails.mcq.map(q=>\r\n                  \r\n                      <div style={flexQuestion}>\r\n                         <span style={{padding:'10px'}}>{q.questionNo}</span>\r\n                      \r\n                         <button id={q.questionNo} onClick={handleClickMcq}>{parseInt(q.studentResponse)===-1 ? 'NA' : 'A'}</button>\r\n                                           \r\n                       </div>\r\n                \r\n                     )}\r\n                   </div>\r\n                </div>\r\n                \r\n                <div style={{position:'absolute',marginTop:'-18vh',marginLeft:'-45vw',padding:'10px',background:'#EFEFEF'}}>\r\n\r\n                   <h2 style={{textAlign:'center'}}>Fill Up</h2>\r\n                   \r\n                   <div style={flexBox}>\r\n                       \r\n                    {studentDetails.fillUp.map(q=>\r\n                  \r\n                     <div style={flexQuestion}>\r\n                        \r\n                          <span style={{padding:'10px'}}>{q.questionNo}</span>\r\n                   \r\n                          <button id={q.questionNo} onClick={handleClickFillUp}>{parseInt(q.studentResponse)===-1 ? 'NA' : 'A'}</button>               \r\n                     </div>\r\n                   )}\r\n\r\n                   </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n           { count < questions.length ?\r\n               \r\n               <form key={questions[count].questionNo} onSubmit={onSubmit} id={questions[count].questionNo}>\r\n                  \r\n                  <div>\r\n\r\n                    <span style={{fontSize:'160%'}}>Question No: {questions[count].questionNo}</span>\r\n                        \r\n                    <input style={{background:'#EFEFEF',marginTop:'10px',textAlign:'left'}} type='text' name='question' value={questions[count].question} />\r\n                                            \r\n                   </div>\r\n                   <div className='enteroptions'style={{marginTop:'10px', marginBottom:'10px'}}>\r\n\r\n                    { questions[count].options.map(op=>\r\n\r\n                            <label style={{marginLeft:'20px'}}>{op.option}\r\n\r\n                            { multipleChoice === 'Single Option Answer' ? \r\n                            \r\n                             studentDetails.mcq[count]!==undefined && parseInt( studentDetails.mcq[count].studentResponse ) === op.optionNo ?\r\n                               \r\n                               <input type=\"radio\"  style={{background:'#EFEFEF'}}  name={questions[count].questionNo} key={op.optionNo} value={op.optionNo} onChange={handleChangeMcq} checked/>\r\n                            :  \r\n                               <input type=\"radio\"  style={{background:'#EFEFEF'}}  name={questions[count].questionNo} key={op.optionNo} value={op.optionNo} onChange={handleChangeMcq} />\r\n                            :\r\n\r\n                            studentDetails.mcq[count]!==undefined && String(studentDetails.mcq[count].studentResponse).split(' ').includes(String(op.optionNo))\r\n                            ?\r\n                            <input \r\n                                type=\"checkbox\"   \r\n                                style={{background:'#EFEFEF'}}  \r\n                                name={questions[count].questionNo} \r\n                                key={op.optionNo} \r\n                                value={op.optionNo} \r\n                                checked='false'\r\n                            /> :\r\n                            <input \r\n                                type=\"checkbox\"   \r\n                                style={{background:'#EFEFEF'}}  \r\n                                name={questions[count].questionNo} \r\n                                key={op.optionNo} \r\n                                value={op.optionNo} \r\n                            />\r\n                            }\r\n                         </label>\r\n             \r\n                     )  }\r\n                   </div>\r\n\r\n                   <div style={{display:'flex',justifyContent:'space-around'}}>\r\n\r\n                      <button type=\"submit\" className='SEfinal' style={{borderRadius:'10px',padding:'7px'}}>Submit</button> \r\n           \r\n                      <button onClick={goToNextMcq} className='SEfinal' style={{borderRadius:'9px',padding:'7px'}}>Next Question</button>          \r\n                    \r\n                    </div>\r\n\r\n                </form>  \r\n            : ( count - questions.length) < fillUp.length ? \r\n            \r\n              <form key={fillUp[countF].questionNo} onSubmit={onSubmitFillUp} id={fillUp[countF].questionNo}>\r\n                    \r\n                    <span style={{fontSize:'160%'}}>Fill Up : {fillUp[countF].questionNo}</span>\r\n\r\n                    <input style={{background:'#EFEFEF',marginTop:'10px',marginBottom:'10px'}} type='text' name={fillUp[countF].questionNo} value={fillUp[countF].question} /> \r\n                    \r\n                    { studentDetails.fillUp[countF]!==undefined && parseInt( studentDetails.fillUp[countF].studentResponse ) !== -1 ?\r\n                 \r\n                         <input style={{background:'#EFEFEF'}}  name={fillUp[countF].questionNo} value={studentDetails.fillUp[countF].studentResponse} placeholder='your answer..' onChange={handleChangeFillUp}/>\r\n                     :  \r\n                         <input style={{background:'#EFEFEF'}}  name={fillUp[countF].questionNo} value={answer} placeholder='your answer..' onChange={handleChangeFillUp}/>\r\n                    }\r\n                    \r\n                    <div style={{display:'flex',justifyContent:'space-around'}}>\r\n                        \r\n                       <button type=\"submit\" className='SEfinal' style={{borderRadius:'10px',padding:'7px'}}>Submit</button> \r\n           \r\n                       <button onClick={goToNextFillUp} className='SEfinal' style={{borderRadius:'9px',padding:'7px'}}>Next Question</button>          \r\n  \r\n                    </div>\r\n              </form>  \r\n\r\n            : <button>Your exam is over</button> }\r\n\r\n            <div style={{position:'absolute',top:'80vh',transform:'translateX(-10%)'}}>\r\n               \r\n               <Link to={`/Final_Submission?_id=${_id}&studentId=${student_id}`}>\r\n               \r\n                    <button className='SEfinal' style={{width:'200px',padding:'10px'}}>Final Submittion</button>\r\n               \r\n               </Link>\r\n            </div>\r\n     </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Give_quiz","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\mcq_form.js",["347"],"import React,{ useState ,useContext , useEffect } from 'react'\r\n\r\nimport { Link , useParams } from 'react-router-dom';\r\n\r\nimport queryString from 'query-string';\r\n\r\nimport '../../css/mcq.css';\r\n\r\nimport axios from 'axios';\r\n\r\nimport McqContext from '../../context/MCQContexts/McqContext';\r\n\r\nimport Navbar from '../navbar/Navbar';\r\n\r\nconst Mcq_form = ({location}) => {\r\n\r\n    const [ _id , setId ] = useState('');\r\n\r\n    const [ name , setName ] = useState('');\r\n\r\n    const [ room , setRoom ] = useState('');\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchData = async()=>{\r\n        \r\n            const { name , room , _id  } = queryString.parse(location.search);\r\n\r\n            setId(_id);\r\n            setName(name);\r\n            setRoom(room);\r\n        }\r\n        \r\n        fetchData();\r\n\r\n    },[location.search])\r\n\r\n    const { GetFormCreationDetails } = useContext(McqContext);\r\n\r\n    const [ examUpdated , setExamUpdated ] = useState(false);\r\n\r\n    const [ response , setResponse ] = useState('');\r\n\r\n    const [ formDetails , setFormDetails ] = useState({\r\n        pattern:'Multiple Option Answer',\r\n        navigation:'Yes'\r\n    })\r\n\r\n    const handleChange = (e)=>{\r\n        setFormDetails({\r\n            ...formDetails,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = async (e)=>{\r\n       \r\n        e.preventDefault();\r\n       \r\n        console.log(formDetails);\r\n\r\n        GetFormCreationDetails(formDetails);\r\n\r\n        const data = {\r\n            \r\n            navigationStatus: formDetails.navigation,\r\n\r\n            mcqType: formDetails.pattern\r\n        }\r\n\r\n        const config ={\r\n           header:{\r\n             'Content-type':'application/json'\r\n          }\r\n        }\r\n\r\n        console.log(_id);\r\n\r\n        axios.patch(`/objective_exam/${_id}`,data,config)\r\n            \r\n        .then((response) => {\r\n\r\n               console.log(response.data);\r\n               \r\n                if(response.data.msg!==undefined){\r\n                    \r\n                    setResponse(response.data.msg);\r\n                    \r\n                    return;\r\n                }\r\n              \r\n                setResponse(\"The exam room has been Updated\");\r\n\r\n                setExamUpdated(true);\r\n            \r\n        }).catch((error) => {\r\n            \r\n            setExamUpdated(false);\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const lowerContainer = {\r\n        height:'50px',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        justifyContent:'space-around',\r\n        allignItems:'center',\r\n        textAlign:'center',\r\n        marginTop:'-5vh'\r\n    }\r\n\r\n    return (\r\n        <div style={{height:'100vh',overflow:'hidden'}}>\r\n\r\n           <Navbar />\r\n\r\n           <div  className='containerMcqForm MCQform2nd' >\r\n\r\n               <h1 style={{transform:'translateX(0%)',fontWeight:'bold'}}>Mcq Form</h1>\r\n\r\n               <form onSubmit={onSubmit} className='formData'>\r\n    \r\n                   <h3 style={{fontSize:'2rem',fontWeight:'bold'}}>Whether it would be single choice or multiple choice ?</h3>\r\n\r\n              <div style={{fontSize:'1.5rem',marginTop:'-3%'}} className=\"options\">\r\n       \r\n                      <label > Multiple Option Answer\r\n        \r\n                        <input style={{marginLeft:'20px',transform:'scale(2.2)'}} type=\"radio\" name=\"pattern\" value='Multiple Option Answer' onChange={handleChange}  />\r\n                      </label>\r\n\r\n                      <label >Single Option Answer\r\n         \r\n                         <input style={{marginLeft:'20px',transform:'scale(2.2)'}} type=\"radio\" name=\"pattern\" value='Single Option Answer' onChange={handleChange}   />\r\n                     </label>\r\n\r\n              </div>\r\n\r\n\r\n              <h3 style={{fontSize:'2rem',fontWeight:'bold'}}>Would You allow students to navigate back ?</h3>\r\n\r\n              <div className=\"options\" style={{fontSize:'1.5rem',marginTop:'-3%'}}>\r\n       \r\n                 <label > Yes\r\n                      <input style={{marginLeft:'20px',transform:'scale(2.2)'}} type=\"radio\" name=\"nagigation\" value=\"Yes\" onChange={handleChange} />\r\n               </label>\r\n\r\n               <label > No\r\n                     <input style={{marginLeft:'20px',transform:'scale(2.2)'}} type=\"radio\" name=\"nagigation\" value=\"No\" onChange={handleChange}  />\r\n                </label>\r\n\r\n             </div>\r\n\r\n             <button className=\"button1\" style={{marginTop:'-5%',color:'white'}} type='submit'>Update Details of MCQ</button> \r\n         </form>\r\n\r\n        <div style={lowerContainer} >\r\n           { response!==''? response : '' }\r\n \r\n           { examUpdated===true ? \r\n              \r\n                  <Link to={`/fill_mcq_questions?name=${name}&room=${room}&_id=${_id}`}>\r\n                 \r\n                        <button className=\"SEfinal\" style={{padding:'15px'}}>Fill Questions </button>\r\n                  </Link>\r\n           : null } \r\n        </div>\r\n       <div style={{height:'12vh'}}></div>\r\n</div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Mcq_form\r\n","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\MCQContexts\\McqContext.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\MCQContexts\\McqState.js",[],"C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\context\\MCQContexts\\McqReducer.js",["348"],"import { MCQ_CREATION_DETAILS , ADD_MCQ , ADD_FILL_UP  , EDIT_FILL_UP_RESPONSES , EDIT_MCQ_RESPONSES } from '../types';\r\n\r\nexport default (state,{type,payload})=>{\r\n   switch(type){\r\n        case MCQ_CREATION_DETAILS:\r\n            return{\r\n               ...state,\r\n               formCreationDetails:payload\r\n            }\r\n         case ADD_MCQ:\r\n            return{\r\n               ...state,\r\n               mcqs:[...state.mcqs,payload]\r\n            }\r\n         case ADD_FILL_UP:\r\n            return{\r\n               ...state,\r\n               fillUps:[...state.fillUps,payload]\r\n            }\r\n        case EDIT_MCQ_RESPONSES:\r\n           return{\r\n              ...state,\r\n              mcqs:state.mcqs.map(res=>parseInt(res.questionNo)===parseInt(payload.questionNo) ? payload : res )\r\n           }\r\n        case EDIT_FILL_UP_RESPONSES:\r\n           return{\r\n              ...state,\r\n              fillUps:state.fillUps.map(res=>parseInt(res.questionNo)===parseInt(payload.questionNo) ? payload : res )\r\n           }\r\n        default:\r\n            return state;\r\n   }\r\n}","C:\\Users\\TRISHANKU\\Desktop\\NodeJS\\finalKaaFinal\\Solution-Challenge-Porikkha\\client\\src\\components\\mcq\\classHallTeacher.js",["349","350","351","352","353","354","355","356","357"],"import React,{ useState , useEffect , useContext } from 'react';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport queryString from 'query-string';\r\n\r\nimport '../../css/mcq.css'\r\n\r\nimport McqContext from '../../context/MCQContexts/McqContext';\r\n\r\nimport axios from 'axios';\r\n\r\nimport io from 'socket.io-client';\r\n\r\nimport Timer from '../Timer/Timer';\r\n\r\nimport Navbar from '../navbar/Navbar';\r\n\r\nlet socket;\r\n\r\nconst ClassHallTeacher = ({location}) => {\r\n\r\n    const [ _id , setId ] = useState('');\r\n\r\n    const [ name , setName ] = useState('');\r\n\r\n    const [ room , setRoom ] = useState('');\r\n\r\n    const [examName , setExamName] = useState('');\r\n\r\n    const [ usersInRoom , setusersInRoom ] = useState([]);\r\n\r\n    const [ questions , setQuestions ] = useState([]);\r\n\r\n    const [ fillUp , setFillUp ] = useState([]);\r\n\r\n    const [error,setError]=useState(null);\r\n\r\n    const [ startDate , setstartDate ] = useState(0);\r\n\r\n    const [ multipleChoice , setMultipleChoice ] = useState(false);\r\n\r\n    const END_POINT = 'localhost:5000';\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchData = async()=>{\r\n        \r\n            const { name , room , _id  } = queryString.parse(location.search);\r\n\r\n            setId(_id);\r\n\r\n            setName(name);\r\n            \r\n            setRoom(room);\r\n\r\n            const response = await axios.get(`/objective_exam/getExamById/${_id}`);\r\n\r\n            console.log(response);\r\n\r\n            setMultipleChoice(response.data.exam.mcqType);\r\n\r\n            setExamName(response.data.exam.name);\r\n\r\n            if(response.data.error!==undefined){\r\n               setError(response.data.error);\r\n               return;\r\n            }\r\n\r\n           setQuestions(response.data.mcqs);\r\n\r\n           setFillUp(response.data.fill_ups);\r\n\r\n           const x = (response.data.exam.timeLength.split(\":\")[0]*60*60 + response.data.exam.timeLength.split(\":\")[1]*60 )*1000 ;\r\n\r\n            console.log(response.data.exam.timeLength.split(\":\")[0] ,\" \",response.data.exam.timeLength.split(\":\")[1], x);\r\n          \r\n            setstartDate(response.data.exam.startTime+ x);\r\n\r\n\r\n            socket = io();\r\n\r\n            console.log(socket);\r\n \r\n            socket.emit( 'joinRoom' , { username: name , room } );\r\n \r\n            //teacher portal\r\n \r\n            socket.on('getUsersToRoom',({room , users})=>{\r\n                setusersInRoom(users);\r\n            }) \r\n            \r\n            return()=>{\r\n                socket.on('disconnect');\r\n \r\n                //teacher portal\r\n \r\n                socket.on('getUsersToRoom',({room , users})=>{\r\n                    setusersInRoom(users);\r\n                }) \r\n                \r\n                socket.off();\r\n            }\r\n         }\r\n         \r\n         fetchData();\r\n \r\n     },[location.search, END_POINT])\r\n\r\n    const container = {\r\n        width:'100vw',\r\n        display:'flex',\r\n        allignItems:'center',\r\n        justifyContent:'spaceAround',\r\n        marginLeft:'50vw'\r\n    }\r\n\r\n    return (\r\n        <div style={{width:'100vw', fontFamily:'sans-serif',overflowX:'hidden'}}>\r\n\r\n        <Navbar />\r\n\r\n        <div className='containerMcqForm MCQ3rd'>\r\n\r\n            <h1 style={{ marginLeft:'50vw' , transform:'translateX(-55%)' }}>Exam Name: {examName}</h1>\r\n\r\n            <div style={container}>\r\n\r\n              <div style={{marginLeft:'-20vw'}}>\r\n\r\n                {questions.map(q=>\r\n                  <div style={{marginTop:'20px',width:'50vw'}}>\r\n    \r\n                     <div>\r\n                        <span style={{fontSize:'160%'}}>Question No: {q.questionNo}</span>\r\n        \r\n                        <input style={{background:'#EFEFEF',marginTop:'10px',textAlign:'left'}} type='text' name='question' value={q.question} />\r\n                             \r\n                     </div>\r\n                   <div>\r\n                   <div className='enteroptions'style={{marginTop:'10px', marginBottom:'10px'}}>\r\n                 \r\n                       {q.options.map(op=>\r\n\r\n                       <label style={{marginLeft:'20px'}}>{op.option}\r\n\r\n                          {/* { parseInt( op.optionNo ) === parseInt( q.correct_answer ) ?                  */}\r\n                          \r\n                          { q.correct_answer.split(' ').includes(String(op.optionNo)) ?                 \r\n\r\n\r\n                           <input \r\n                               style={{background:'#EFEFEF'}} \r\n                               type={ multipleChoice == 'Single Option Answer' ? \"radio\" : \"checkbox\" }  \r\n                               name={q.questionNo} \r\n                               key={op.optionNo} \r\n                               value={op.optionNo} \r\n                               checked='true'\r\n                            />\r\n\r\n                           :  <input \r\n                               style={{background:'#EFEFEF'}} \r\n                               type={ multipleChoice == 'Single Option Answer' ? \"radio\" : \"checkbox\" }  \r\n                               name={q.questionNo} \r\n                               key={op.optionNo} \r\n                               value={op.optionNo} \r\n                               />\r\n                           }\r\n             \r\n                       </label>\r\n                      )}\r\n                   </div>\r\n             </div>\r\n             <div>\r\n               <input style={{background:'#EFEFEF'}} type='text' name='correct_answer' value={`Correct Answer : ${ q.correct_answer }`} required />\r\n             </div>\r\n        </div> )}\r\n\r\n      { fillUp.map(q=>\r\n      \r\n         <div style={{marginTop:'20px',width:'50vw'}}>\r\n             \r\n             <span style={{fontSize:'160%'}}>Fill Up : {q.questionNo}</span>\r\n    \r\n             <input style={{background:'#EFEFEF',textAlign:'left',marginTop:'15px',marginBottom:'15px'}} type='text' name='question' value={q.question} placeholder='Enter FILL up' required />    \r\n\r\n             <div>\r\n                <input style={{background:'#EFEFEF'}} type='text' name='correct_answer' value={`Correct Answer : ${ q.correct_answer }`} required />   \r\n             </div>\r\n\r\n         </div>\r\n       ) }\r\n\r\n   </div>\r\n\r\n   <div style={{color:'black',marginLeft:'15vw'}}>\r\n\r\n      <div>\r\n          <h2 style={{textAlign:'center'}}>Time Remaining : </h2>\r\n          <Timer startDate={startDate}/>\r\n      </div>\r\n      \r\n      <div style={{marginTop:'40px'}}>\r\n         <h2 className=\"tExam \" style={{color:'black',textAlign:'center'}} >Student List</h2>\r\n\r\n         <table className=\"tExamstudentList\" style={{color:'black'}}>\r\n\r\n            <th style={{paddingRight:'100px',color:'black'}}>Name</th>\r\n            <th>Status</th>\r\n\r\n\r\n            {usersInRoom.map((user)=><tr key={user.id}>\r\n\r\n               <td>{user.username}</td>\r\n\r\n               <td>{user.status===true?\"True\":\"False\"}</td>\r\n\r\n            </tr>)} \r\n\r\n        </table>\r\n      </div>\r\n   </div> \r\n  </div>\r\n </div>\r\n</div>\r\n\r\n)\r\n}\r\n\r\nexport default ClassHallTeacher;\r\n",{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"362","severity":1,"message":"363","line":66,"column":9,"nodeType":"364","messageId":"365","endLine":66,"endColumn":20},{"ruleId":"362","severity":1,"message":"366","line":21,"column":13,"nodeType":"364","messageId":"365","endLine":21,"endColumn":18},{"ruleId":"367","severity":1,"message":"368","line":49,"column":8,"nodeType":"369","endLine":49,"endColumn":28,"suggestions":"370"},{"ruleId":"367","severity":1,"message":"371","line":33,"column":7,"nodeType":"369","endLine":33,"endColumn":16,"suggestions":"372"},{"ruleId":"367","severity":1,"message":"373","line":41,"column":7,"nodeType":"369","endLine":41,"endColumn":19,"suggestions":"374"},{"ruleId":"362","severity":1,"message":"375","line":53,"column":11,"nodeType":"364","messageId":"365","endLine":53,"endColumn":23},{"ruleId":"376","severity":1,"message":"377","line":57,"column":17,"nodeType":"378","endLine":57,"endColumn":40},{"ruleId":"379","severity":1,"message":"380","line":64,"column":25,"nodeType":"378","endLine":64,"endColumn":57},{"ruleId":"362","severity":1,"message":"381","line":1,"column":63,"nodeType":"364","messageId":"365","endLine":1,"endColumn":67},{"ruleId":"362","severity":1,"message":"382","line":1,"column":70,"nodeType":"364","messageId":"365","endLine":1,"endColumn":78},{"ruleId":"362","severity":1,"message":"383","line":1,"column":80,"nodeType":"364","messageId":"365","endLine":1,"endColumn":88},{"ruleId":"362","severity":1,"message":"384","line":18,"column":13,"nodeType":"364","messageId":"365","endLine":18,"endColumn":21},{"ruleId":"362","severity":1,"message":"385","line":26,"column":19,"nodeType":"364","messageId":"365","endLine":26,"endColumn":25},{"ruleId":"367","severity":1,"message":"386","line":55,"column":15,"nodeType":"387","endLine":86,"endColumn":6},{"ruleId":"367","severity":1,"message":"388","line":86,"column":8,"nodeType":"369","endLine":86,"endColumn":25,"suggestions":"389"},{"ruleId":"362","severity":1,"message":"390","line":93,"column":11,"nodeType":"364","messageId":"365","endLine":93,"endColumn":19},{"ruleId":"391","severity":1,"message":"392","line":86,"column":33,"nodeType":"393","messageId":"394","endLine":86,"endColumn":34},{"ruleId":"362","severity":1,"message":"395","line":5,"column":44,"nodeType":"364","messageId":"365","endLine":5,"endColumn":67},{"ruleId":"362","severity":1,"message":"396","line":5,"column":70,"nodeType":"364","messageId":"365","endLine":5,"endColumn":83},{"ruleId":"362","severity":1,"message":"397","line":5,"column":86,"nodeType":"364","messageId":"365","endLine":5,"endColumn":100},{"ruleId":"367","severity":1,"message":"386","line":45,"column":13,"nodeType":"387","endLine":117,"endColumn":4},{"ruleId":"398","severity":1,"message":"399","line":48,"column":11,"nodeType":"393","messageId":"400","endLine":48,"endColumn":13},{"ruleId":"367","severity":1,"message":"401","line":117,"column":5,"nodeType":"369","endLine":117,"endColumn":7,"suggestions":"402"},{"ruleId":"403","severity":1,"message":"404","line":202,"column":5,"nodeType":"405","messageId":"400","endLine":202,"endColumn":11},{"ruleId":"403","severity":1,"message":"404","line":205,"column":5,"nodeType":"405","messageId":"400","endLine":205,"endColumn":11},{"ruleId":"406","severity":1,"message":"407","line":304,"column":14,"nodeType":"378","endLine":304,"endColumn":81},{"ruleId":"406","severity":1,"message":"407","line":315,"column":10,"nodeType":"378","endLine":315,"endColumn":77},{"ruleId":"367","severity":1,"message":"371","line":47,"column":7,"nodeType":"369","endLine":47,"endColumn":16,"suggestions":"408"},{"ruleId":"362","severity":1,"message":"409","line":128,"column":11,"nodeType":"364","messageId":"365","endLine":128,"endColumn":18},{"ruleId":"410","severity":1,"message":"411","line":188,"column":17,"nodeType":"378","endLine":188,"endColumn":65},{"ruleId":"410","severity":1,"message":"411","line":210,"column":17,"nodeType":"378","endLine":210,"endColumn":72},{"ruleId":"362","severity":1,"message":"412","line":44,"column":13,"nodeType":"364","messageId":"365","endLine":44,"endColumn":25},{"ruleId":"367","severity":1,"message":"386","line":58,"column":16,"nodeType":"387","endLine":126,"endColumn":6},{"ruleId":"367","severity":1,"message":"413","line":126,"column":8,"nodeType":"369","endLine":126,"endColumn":47,"suggestions":"414"},{"ruleId":"362","severity":1,"message":"415","line":223,"column":11,"nodeType":"364","messageId":"365","endLine":223,"endColumn":18},{"ruleId":"362","severity":1,"message":"416","line":229,"column":10,"nodeType":"364","messageId":"365","endLine":229,"endColumn":11},{"ruleId":"362","severity":1,"message":"417","line":231,"column":10,"nodeType":"364","messageId":"365","endLine":231,"endColumn":21},{"ruleId":"398","severity":1,"message":"418","line":253,"column":20,"nodeType":"393","messageId":"400","endLine":253,"endColumn":22},{"ruleId":"367","severity":1,"message":"419","line":260,"column":32,"nodeType":"420","endLine":260,"endColumn":33},{"ruleId":"398","severity":1,"message":"418","line":262,"column":29,"nodeType":"393","messageId":"400","endLine":262,"endColumn":31},{"ruleId":"398","severity":1,"message":"418","line":296,"column":19,"nodeType":"393","messageId":"400","endLine":296,"endColumn":21},{"ruleId":"398","severity":1,"message":"418","line":323,"column":26,"nodeType":"393","messageId":"400","endLine":323,"endColumn":28},{"ruleId":"406","severity":1,"message":"407","line":337,"column":27,"nodeType":"378","endLine":337,"endColumn":93},{"ruleId":"398","severity":1,"message":"418","line":345,"column":28,"nodeType":"393","messageId":"400","endLine":345,"endColumn":30},{"ruleId":"367","severity":1,"message":"421","line":46,"column":6,"nodeType":"369","endLine":46,"endColumn":8,"suggestions":"422"},{"ruleId":"362","severity":1,"message":"423","line":1,"column":17,"nodeType":"364","messageId":"365","endLine":1,"endColumn":26},{"ruleId":"362","severity":1,"message":"424","line":7,"column":10,"nodeType":"364","messageId":"365","endLine":7,"endColumn":17},{"ruleId":"362","severity":1,"message":"415","line":13,"column":11,"nodeType":"364","messageId":"365","endLine":13,"endColumn":18},{"ruleId":"362","severity":1,"message":"425","line":17,"column":22,"nodeType":"364","messageId":"365","endLine":17,"endColumn":35},{"ruleId":"362","severity":1,"message":"417","line":21,"column":11,"nodeType":"364","messageId":"365","endLine":21,"endColumn":22},{"ruleId":"367","severity":1,"message":"426","line":70,"column":8,"nodeType":"369","endLine":70,"endColumn":14,"suggestions":"427"},{"ruleId":"428","severity":1,"message":"429","line":3,"column":1,"nodeType":"430","endLine":35,"endColumn":2},{"ruleId":"428","severity":1,"message":"429","line":3,"column":1,"nodeType":"430","endLine":14,"endColumn":2},{"ruleId":"362","severity":1,"message":"431","line":1,"column":150,"nodeType":"364","messageId":"365","endLine":1,"endColumn":165},{"ruleId":"428","severity":1,"message":"429","line":3,"column":1,"nodeType":"430","endLine":54,"endColumn":2},{"ruleId":"428","severity":1,"message":"429","line":3,"column":1,"nodeType":"430","endLine":29,"endColumn":2},{"ruleId":"362","severity":1,"message":"432","line":2,"column":10,"nodeType":"364","messageId":"365","endLine":2,"endColumn":19},{"ruleId":"362","severity":1,"message":"433","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":16},{"ruleId":"379","severity":1,"message":"380","line":20,"column":21,"nodeType":"378","endLine":20,"endColumn":77},{"ruleId":"362","severity":1,"message":"434","line":60,"column":13,"nodeType":"364","messageId":"365","endLine":60,"endColumn":17},{"ruleId":"362","severity":1,"message":"435","line":5,"column":13,"nodeType":"364","messageId":"365","endLine":5,"endColumn":15},{"ruleId":"362","severity":1,"message":"436","line":14,"column":5,"nodeType":"364","messageId":"365","endLine":14,"endColumn":8},{"ruleId":"362","severity":1,"message":"437","line":15,"column":5,"nodeType":"364","messageId":"365","endLine":15,"endColumn":9},{"ruleId":"367","severity":1,"message":"386","line":30,"column":11,"nodeType":"387","endLine":57,"endColumn":2},{"ruleId":"362","severity":1,"message":"438","line":164,"column":7,"nodeType":"364","messageId":"365","endLine":164,"endColumn":12},{"ruleId":"367","severity":1,"message":"439","line":83,"column":8,"nodeType":"369","endLine":83,"endColumn":22,"suggestions":"440"},{"ruleId":"441","severity":1,"message":"442","line":93,"column":43,"nodeType":"387","messageId":"443","endLine":93,"endColumn":45},{"ruleId":"362","severity":1,"message":"444","line":17,"column":13,"nodeType":"364","messageId":"365","endLine":17,"endColumn":17},{"ruleId":"362","severity":1,"message":"445","line":17,"column":20,"nodeType":"364","messageId":"365","endLine":17,"endColumn":27},{"ruleId":"362","severity":1,"message":"446","line":25,"column":13,"nodeType":"364","messageId":"365","endLine":25,"endColumn":16},{"ruleId":"362","severity":1,"message":"447","line":27,"column":13,"nodeType":"364","messageId":"365","endLine":27,"endColumn":23},{"ruleId":"362","severity":1,"message":"448","line":29,"column":13,"nodeType":"364","messageId":"365","endLine":29,"endColumn":27},{"ruleId":"441","severity":1,"message":"449","line":77,"column":53,"nodeType":"387","messageId":"450","endLine":77,"endColumn":55},{"ruleId":"441","severity":1,"message":"449","line":85,"column":56,"nodeType":"387","messageId":"450","endLine":85,"endColumn":58},{"ruleId":"398","severity":1,"message":"418","line":94,"column":41,"nodeType":"393","messageId":"400","endLine":94,"endColumn":43},{"ruleId":"398","severity":1,"message":"418","line":99,"column":41,"nodeType":"393","messageId":"400","endLine":99,"endColumn":43},{"ruleId":"398","severity":1,"message":"418","line":157,"column":49,"nodeType":"393","messageId":"400","endLine":157,"endColumn":51},{"ruleId":"398","severity":1,"message":"418","line":166,"column":47,"nodeType":"393","messageId":"400","endLine":166,"endColumn":49},{"ruleId":"398","severity":1,"message":"418","line":181,"column":101,"nodeType":"393","messageId":"400","endLine":181,"endColumn":103},{"ruleId":"398","severity":1,"message":"418","line":199,"column":107,"nodeType":"393","messageId":"400","endLine":199,"endColumn":109},{"ruleId":"362","severity":1,"message":"444","line":23,"column":13,"nodeType":"364","messageId":"365","endLine":23,"endColumn":17},{"ruleId":"362","severity":1,"message":"445","line":23,"column":20,"nodeType":"364","messageId":"365","endLine":23,"endColumn":27},{"ruleId":"362","severity":1,"message":"451","line":23,"column":30,"nodeType":"364","messageId":"365","endLine":23,"endColumn":46},{"ruleId":"362","severity":1,"message":"452","line":23,"column":49,"nodeType":"364","messageId":"365","endLine":23,"endColumn":69},{"ruleId":"362","severity":1,"message":"453","line":44,"column":12,"nodeType":"364","messageId":"365","endLine":44,"endColumn":22},{"ruleId":"362","severity":1,"message":"366","line":46,"column":12,"nodeType":"364","messageId":"365","endLine":46,"endColumn":17},{"ruleId":"362","severity":1,"message":"454","line":62,"column":35,"nodeType":"364","messageId":"365","endLine":62,"endColumn":44},{"ruleId":"362","severity":1,"message":"455","line":62,"column":53,"nodeType":"364","messageId":"365","endLine":62,"endColumn":58},{"ruleId":"362","severity":1,"message":"456","line":3,"column":17,"nodeType":"364","messageId":"365","endLine":3,"endColumn":26},{"ruleId":"428","severity":1,"message":"429","line":3,"column":1,"nodeType":"430","endLine":33,"endColumn":2},{"ruleId":"362","severity":1,"message":"457","line":1,"column":39,"nodeType":"364","messageId":"365","endLine":1,"endColumn":49},{"ruleId":"362","severity":1,"message":"458","line":3,"column":9,"nodeType":"364","messageId":"365","endLine":3,"endColumn":13},{"ruleId":"362","severity":1,"message":"459","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":18},{"ruleId":"362","severity":1,"message":"446","line":23,"column":13,"nodeType":"364","messageId":"365","endLine":23,"endColumn":16},{"ruleId":"362","severity":1,"message":"460","line":25,"column":13,"nodeType":"364","messageId":"365","endLine":25,"endColumn":17},{"ruleId":"362","severity":1,"message":"461","line":27,"column":13,"nodeType":"364","messageId":"365","endLine":27,"endColumn":17},{"ruleId":"362","severity":1,"message":"366","line":37,"column":12,"nodeType":"364","messageId":"365","endLine":37,"endColumn":17},{"ruleId":"398","severity":1,"message":"418","line":154,"column":54,"nodeType":"393","messageId":"400","endLine":154,"endColumn":56},{"ruleId":"398","severity":1,"message":"418","line":163,"column":54,"nodeType":"393","messageId":"400","endLine":163,"endColumn":56},"no-native-reassign",["462"],"no-negated-in-lhs",["463"],"no-unused-vars","'hideDisplay' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: '_id' and 'getCorrespondingExams'. Either include them or remove the dependency array.","ArrayExpression",["464"],"React Hook useEffect has missing dependencies: 'getTeacher' and 'teacherState'. Either include them or remove the dependency array.",["465"],"React Hook useEffect has a missing dependency: 'getClassroom'. Either include it or remove the dependency array.",["466"],"'buttonStyles' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'lazy' is defined but never used.","'fallback' is defined but never used.","'Suspense' is defined but never used.","'students' is assigned a value but never used.","'setUrl' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: '_id', 'getCheckStatus', and 'getStudents'. Either include them or remove the dependency array.",["467"],"'topLebal' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'markContainerDesciption' is defined but never used.","'markListStyle' is defined but never used.","'questionAnswer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","React Hook useEffect has missing dependencies: '_id' and 'pdfSrc'. Either include them or remove the dependency array.",["468"],"no-dupe-keys","Duplicate key 'border'.","ObjectExpression","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",["469"],"'heading' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'submitStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'exams' and 'storeExamDetails'. Either include them or remove the dependency array.",["470"],"'history' is assigned a value but never used.","'x' is assigned a value but never used.","'handleClick' is assigned a value but never used.","Expected '===' and instead saw '=='.","Assignments to the 'checkLimit' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'url_id._id'. Either include it or remove the dependency array.",["471"],"'Component' is defined but never used.","'browser' is defined but never used.","'setTabChanges' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'editDetails'. Either include it or remove the dependency array.",["472"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'CLASSROOM_ERROR' is defined but never used.","'MenuItems' is defined but never used.","'Button' is defined but never used.","'days' is assigned a value but never used.","'tf' is defined but never used.","'xyz' is defined but never used.","'warn' is assigned a value but never used.","'count' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fillUpQuestion' and 'mcqQuestion'. Either include them or remove the dependency array.",["473"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'mcqs' is assigned a value but never used.","'fillUps' is assigned a value but never used.","'_id' is assigned a value but never used.","'student_id' is assigned a value but never used.","'studentDetails' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'Edit_MCQ_Details' is assigned a value but never used.","'Edit_Fill_Up_Details' is assigned a value but never used.","'registered' is assigned a value but never used.","'scholarId' is assigned a value but never used.","'email' is assigned a value but never used.","'useParams' is defined but never used.","'useContext' is defined but never used.","'Link' is defined but never used.","'McqContext' is defined but never used.","'name' is assigned a value but never used.","'room' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"476","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},"Update the dependencies array to be: [_id, correspondingExams, getCorrespondingExams]",{"range":"493","text":"494"},"Update the dependencies array to be: [getTeacher, teacher, teacherState]",{"range":"495","text":"496"},"Update the dependencies array to be: [classRooms, getClassroom]",{"range":"497","text":"498"},"Update the dependencies array to be: [_id, getCheckStatus, getStudents, location.search]",{"range":"499","text":"500"},"Update the dependencies array to be: [_id, pdfSrc]",{"range":"501","text":"502"},{"range":"503","text":"496"},"Update the dependencies array to be: [END_POINT, examS, exams, location.search, storeExamDetails]",{"range":"504","text":"505"},"Update the dependencies array to be: [url_id._id]",{"range":"506","text":"507"},"Update the dependencies array to be: [editDetails, open]",{"range":"508","text":"509"},"Update the dependencies array to be: [mcqs, fillUps, mcqQuestion, fillUpQuestion]",{"range":"510","text":"511"},[1329,1349],"[_id, correspondingExams, getCorrespondingExams]",[1079,1088],"[getTeacher, teacher, teacherState]",[1275,1287],"[classRooms, getClassroom]",[2226,2243],"[_id, getCheckStatus, getStudents, location.search]",[3904,3906],"[_id, pdfSrc]",[1376,1385],[3908,3947],"[END_POINT, examS, exams, location.search, storeExamDetails]",[1530,1532],"[url_id._id]",[2145,2151],"[editDetails, open]",[1969,1983],"[mcqs, fillUps, mcqQuestion, fillUpQuestion]"]